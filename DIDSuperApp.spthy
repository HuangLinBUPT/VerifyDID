theory DID
begin

builtins: natural-numbers, multiset

heuristic: o "oracleDID"

functions: 
pk/1, aenc/2, adec/2,
senc/2, sdec/2,
sign/2, checksign/3, true/0,
// Selective Discloure
hash/1,
maskedID/2


equations: sdec(senc(x, k), k) = x
equations: adec(aenc(x, pk(k)), k) = x
equations: checksign(sign(m, k), m, pk(k)) = true

restriction equal:
  "All a b #i. Eq(a, b)@i ==> a = b"

restriction Substring:
  "All a b #i. Substring(a, b)@i ==> a << b"


#include "./TLS.spthy"
#include "./tactics"
 



/*=== Phone Initialization ===*/
rule Phone[color=#004225]:
  []
  --[ ClaimNumber($A, $Number)
    , IsPhoneNumber($Number) ]->
  [ !Phone($A, $Number) ]


/*=== Install SuperApp client ===*/
/*--------------------------------------------*/
/* An OpenID is a unique identifier for Alipay 
 * users at the application level. When Alipay 
 * users access different applications such as 
 * mini-programs, web-based mobile applications, 
 * or Official Accounts, a unique OpenID is generated. */
/*------------------------------------------- */

rule InstallSuperAppClient[color=#A3C1AD]:
	[	!Phone($UserName, $Number)
	,	Fr(~userid)
	, Fr(~sensitiveData)
	,	Fr(~disclosure)
	,	Fr(~k) ]
--[	InstallSuperApp($UserName, $Number, ~userid)
  , DataBase(~userid, ~disclosure, ~sensitiveData) ]->
	[ !SuperApp($UserName, $Number, ~userid)
	,	!Server($UserName, $Number, ~userid)	
	,	!DB(~userid, ~disclosure, ~sensitiveData) ]

restriction uniqueUserAccount:
  "All name1 name2 number1 number2 userid1 userid2 #i #j.
      InstallSuperApp(name1, number1, userid1)@i 
    & InstallSuperApp(name2, number2, userid2)@j
    ==> 
      #i = #j & name1 = name2 & number1 = number2
		& userid1 = userid2"


rule SuperAppSetUp:
	[	!SuperApp($userName, $Number, userid)
	,	Fr(~k)	]
--[	SetupKey(userid, ~k)
	,	RegisterDIDdocument($Holder, $context, pk(~k))	]->
	[	!TEELTK($Holder, userid, ~k)
	,	!TEEPK($Holder, userid, pk(~k))
	, !DID(<'context', $context>, <'id', $Holder>, <'auth', pk(~k)>) 
	, Out(pk(~k))	]

restriction uniquClientKey:
  "All userid k1 k2 #i #j.
			SetupKey(userid, k1)@i 
    & SetupKey(userid, k2)@j
    ==> #i = #j"


/* A several attack, where the private key is leaked. */
rule RevealSuperAppKey[color=#E52B50]:
  [!TEELTK($Holder, userid, k)]
--[ CompromiseTEE(userid),
    AdversaryActivity() ]->
  [ Out(k)  ]


/** The sensitive data can be leaked */
rule LeakSenstiveData[color=#E52B50]:
  [ !DB(userid, disclosure, sensitiveData)  ]
--[ LeakData(userid, sensitiveData),
    LeakData(userid, disclosure),
    AdversaryActivity() ]->
  [ Out(disclosure)
	,	Out(sensitiveData) ]

	

/*=== Anouymous openid for different mini-programs  ===*/
/*******************************************************/
/* Furthermore, for the same user, the OpenID differs 
 * across various applications. For instance, the OpenID 
 * for the same user will vary between different mini-
 * programs, and similarly, it will differ across various
 * web-based mobile applications.*/
/********************************************************/
rule MiniprogramRegister[color=#FFF8E7]:
	[	Fr(~appid)
	,	Fr(~openid)
	,	Fr(~k)
	,	!SuperApp($UserName, $Number, ~userid)]
--[	MiniprogramRegister($A, ~userid, ~appid)	]->
	[	/*=== The miniProgram `appid` is register within SuperApp $A, ===*/
		/*=== whose identifier is masked as `openid`.        					===*/
		!MiniProgram($A, ~openid, ~appid)
	,	!MLTK($A, ~appid, ~k)
	,	!MPK($A, ~appid, pk(~k))
	,	Out(pk(~k))
	,	!DID(<'context', $context>, <'id', $A>, <'auth', pk(~k)>) ]


rule RevealMiniProgramPrivKey[color=#E52B50]:
  [ !MLTK($A, appid, ltk)]
--[ Reaveal(appid, ltk),
    AdversaryActivity() ]->
  [ Out(ltk)  ]


/*=== Oauth 2.0 authCode flow ===*/
/*-------------------------------------------------------*/
rule AuthCodeRequest[color=#FDD5B1]:
  [ !MiniProgram($Issuer, openid, appid)
	, !SuperApp($UserName, $Number, ~userid)
	,	Fr(~sess)	]
--[ Issuer(appid)
  , LIssurerAuthCodeRequest($Issuer, appid) ]->
  [ St_MP_AuthCodeReq($Issuer, ~sess, openid, appid),
    TLSClient_Out('GET', ~sess, $Issuer, <'userInfo', appid, 'req'>) ]


rule SuperAppGenerateAuthCode[color=#6495ED]:
  [ TLSServer_In('GET', ~sess, $Issuer, <'userInfo', appid, 'req'>)
	,	!SuperApp($UserName, $Number, userid)
	,	Fr(~authCode)
	,	In(%lifeTime)	]
--[ LAuthCodeGenerate(userid, %lifeTime, ~authCode)
  , IsSession(~sess)
  , InitSession(~sess)
  , MustIssuer(appid) ]->
  [ TLSServer_Out('GET', ~sess, $Issuer, <'authCode', appid, ~authCode>)
	, St_SA_IssueCode($UserName, $Issuer, appid, ~authCode)
	,	AuthCode(~authCode)  ]


restriction legalInitalReq:
  "not (
    Ex sess #i #j. InitSession(sess)@i & KU(sess)@j
  )"

/********************************************************
 * Here we make an abstract. In practice, the authcode
 * is first redirected to the frontend of Mini-program,
 * then it is transmitted to backend via HTTPS.
 * We do not consider the adversary beheavior within the
 * transmission, therefore merge them within one MSR rule. 
 ********************************************************/

rule MPgetAuthCode[color=#FDD5B1]:
  [ St_MP_AuthCodeReq($Issuer, sess, openid, appid)
	,	TLSClient_In('GET', sess, $Issuer, <'authCode', appid, authCode>)
	,	Fr(~sessPost) ]
--[ LMFGetAuthCode($Issure, appid, authCode)
  , StartSession(~sessPost)
  , IsAuthCode(authCode) ]->
  [ St_MP_TokenReq($Issuer, openid, appid, authCode)
	,	TLSClient_Out('POST', ~sessPost, $Issuer, <'token_req', appid, authCode>) ]


rule SuperAppAuthEndPointGenerateToken[color=#6495ED]:
  [ TLSServer_In('POST', ~sess, $Issuer, <'token_req', appid, authCode>)
	,	St_SA_IssueCode($UserName, $Issuer, appid, authCode)
	,	!SuperApp($UserName, $Number, userid)
	,	Fr(~token)	]
--[ IsSession(~sess)
  , UseCode($Issuer, authCode)  ]->
  [ TLSServer_Out('POST', ~sess, $Issuer, <'token_consume', appid, ~token>)
	,	St_SA_DistributeToken($UserName, $Issuer, appid, ~token)
	,	Token(~token)  ]


rule MBCallInfoShareAPI[color=#FDFD96]:
  [ St_MP_TokenReq($Issuer, openid, appid, authCode)
	,	TLSClient_In('POST', ~sess, $Issuer, <'token_consume', appid, token>)
	,	Fr(~sessCall) ]
--[ IsSession(~sess)
  , StartSession(~sessCall) ]->
  [ St_MB_CallInfoShare($Issuer, openid, appid, token)
	,	TLSClient_Out('GET', ~sessCall, $Issuer, <'accessInfoReq', appid, token>) ]



rule SuperAppReturnValue[color=#6495ED]:
  [ TLSServer_In('GET', ~sess, $Issuer, <'accessInfoReq', appid, token>)
	,	St_SA_DistributeToken($UserName, $Issuer, appid, token)
  ,	!DB(userid, disclosure, sensitiveData)]
--[ IsSession(~sess)
  , IsToken(token)  ]->
  [ TLSServer_Out('GET', ~sess, $Issuer, <'accessInfo', appid, <disclosure, sensitiveData>>)]



rule MBgetSentitiveData[color=#FDFD96]:
  [ St_MB_CallInfoShare($Issuer, openid, appid, token)
	,	TLSClient_In('GET', ~sess, $Issuer, <'accessInfo', appid, <disclosure, sensitiveData>>)]
--[	LMBGetSensitiveData(appid, <disclosure, sensitiveData>)
  , IsSession(~sess)	]->
  [ !MBDB($Issuer, openid, appid, <disclosure, sensitiveData>) ]



/*=== Selective Discloure ===*/
/***************************************************************************************/
/*  <Issuer-signed JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>~ 
 * An SD-JWT+KB with Disclosures:
 * <Issuer-signed JWT>~<Disclosure 1>~<Disclosure N>~<KB-JWT>
 * Each digest value ensures the integrity of, and maps to, the respective Disclosure.
 * Digest values are calculated using a hash function over the Disclosures, 
 * each of which contains a cryptographically secure random salt, 
 * the claim name (only when the claim is an object property), and the claim value. */
/***************************************************************************************/



/***************************************************
 * Here we make a similar abstraction as above.
 * We consider the transmit of VC from mini-program
 * to super app, without accounting for how the 
 * VC transmitted from the frontend to the backend.
 **************************************************/
rule MBConstructCredential[color=#FDFD96]: 
  let digest = hash(disclosure) ++ hash(sensitiveData)
      Issuer_signed_JWT = <digest, sign(digest, PrivKey)>
      credential = <Issuer_signed_JWT, disclosure ++ sensitiveData>
      envelope_key_encrypted = aenc(~envelope_key, pubKey)
      VC_data = <senc(Issuer_signed_JWT, ~envelope_key), envelope_key_encrypted>
  in
  [ !MBDB($Issuer, openid, appid, <disclosure, sensitiveData>)
	,	!MLTK($Issuer, appid, PrivKey)
  ,	!TEEPK($Holder, userid, pubKey) // userid is not accessible
  ,	Fr(~envelope_key)
  ,	Fr(~sess) ]
--[ LCredentialIssurance($Issuer, appid, VC_data)
  , SignJWT(Issuer_signed_JWT)
  , IssueVC(appid, credential)
  , StartSession(~sess) ]->
  /* The Mini-program generates a VC in the backend */
  [ JSAPI_Out('importVC', appid, VC_data) ]

  
/****************************************** */ 
rule JSAPIOut[color=#FFFFFF]:
  [ JSAPI_Out(NameAPI, id, msg) ]
  -->
  [ !JSAPI(NameAPI, id, msg) ]

rule Z_JSAPICompromised[color=#FF6961]:
  [ !JSAPI(NameAPI, id, msg) ]
  --[ MaliciousProgram(NameAPI, id)
    , AdversaryActivity() ]->
  [ Out(msg) ]

rule AdversaryJSAPI_out[color=#FFFFFF]:
  [ In(NameAPI), In(id), In(msg) ]
--[ MaliciousProgram(NameAPI, id)
    , AdversaryActivity() ]->
  [ !JSAPI(NameAPI, id, msg) ]

rule JSAPIIn[color=#FFFFFF]:
  [ !JSAPI(NameAPI, id, msg) ]
  --[ JSAPIgenerate(msg) ]->
  [ JSAPI_In(NameAPI, id, msg) ]
/****************************************** */ 

rule SuperAppStoreVC[color=#6495ED]:
  let pkH = pk(skH)
      digest = hash(disclosure) ++ hash(sensitiveData)  
      Issuer_signed_JWT = <digest, signature>
      credential = <Issuer_signed_JWT, disclosure ++ sensitiveData> 
      envelope_key_encrypted = aenc(envelope_key, pkH)
      VC_data = <senc(Issuer_signed_JWT, envelope_key), envelope_key_encrypted>
  in
  [ JSAPI_In('importVC', appid, VC_data)
	,	!SuperApp($UserName, $Number, userid)
	,	!MPK($Issuer, appid, pkI)
	,	!TEELTK($Holder, userid, skH)
	,	!DB(userid, disclosure, sensitiveData)     ]
--[ Eq(checksign(signature, digest, pkI), true),
    LSuperAppStoreVC(userid, VC_data, credential),
    SuperAppVC(userid, VC_data, credential)  ]->
  /*==  The credential is stored in THE Client of SuperApp, e.g., TEE. ==*/
  [ !VC(userid, credential)	]


restriction UniqueVCstore:
  "All #i #j userid d1 d2 credential.
      SuperAppVC(userid, d1, credential) @ #i 
    & SuperAppVC(userid, d2, credential) @ #j
    ==> #i = #j"

rule PresentationRequest[color=#F4C2C2]:
  [ !MiniProgram($Verifier, openid, appid)
	,	Fr(~sess)
	,	Fr(~ShowReq) ]
--[ Verifier(appid)
  , LVerifierShowPreReq($Verifier, appid, ~ShowReq)  ]->
  [ St_MF_PresentReq($Verifier, openid, appid)
	,	JSAPI_Out('RequestVP', appid, 'request_VP') ]


/* We assume that a mini-program is either a verifier or an issuer */
restriction UniqueRole:
  "not (
      Ex #i #j appid.
        Issuer(appid)@i & Verifier(appid)@j )"


rule SuperAppConstructVPwithDisclosure[color=#6495ED]:
  let credential = <Issuer_signed_JWT, disclosure ++ sensitiveData> 
      payload = <Issuer_signed_JWT, disclosure>
      proof = sign(payload, skH)
      VP = <payload, proof>
      envelope_key_encrypted = aenc(~envelope_key, pkV)
      encryptedVP = senc(VP, ~envelope_key)
      Presentation = <encryptedVP, envelope_key_encrypted>
  in
  [ JSAPI_In('RequestVP', appid, request_VP) 
  ,	!SuperApp($UserName, $Number, userid)
	,	!TEELTK($Holder, userid, skH)
	,	!MPK($Verifier, appid, pkV)
	,	!VC(userid, credential),
    Fr(~envelope_key) ]
--[ LHolderPresentVP(userid, appid, VP)
  , Pair(credential, payload)
  , VPrequestFrom(appid)
  , HolderPresent(userid, Presentation) ]->
  [ JSAPI_Out('PresentVP', appid, Presentation) ]


restriction UniqueVPreqfrom:
  "All #i #j app. 
    VPrequestFrom(app) @ #i &  VPrequestFrom(app) @ #j
  ==> #i = #j"


/* A holder may possess multiple VP. */
/* Fact `LHolderPresentVP` states that the holder
 * `userid` presents a `VP` to the verifier `app`. 
 * We assume that for a specific verifier, the VP is specific. */
restriction UniqueVP:
  "All #i #j userid app VP1 VP2.
      LHolderPresentVP(userid, app, VP1) @ #i 
    & LHolderPresentVP(userid, app, VP2) @ #j 
  ==> #i = #j & VP1 = VP2"



rule MBVerifyPresentation[color=#F4C2C2]:
  let 
      pkV = pk(skV)
      // digest = prefixHash ++ postfixHash
			Issuer_signed_JWT = <digest, signature>
      payload = <Issuer_signed_JWT, disclosure>
      VP = <payload, proof>
      envelope_key_encrypted = aenc(envelope_key, pkV)
      encryptedVP = senc(VP, envelope_key)
      Presentation = <encryptedVP, envelope_key_encrypted>
  in
  [ St_MF_PresentReq($Verifier, openid, appid)
	,	JSAPI_In('PresentVP', appid, Presentation) 
  ,	!MLTK($Verifier, appid, skV)
  ,	!MPK($Issuer, IssueID, pkI)
  ,	!TEEPK($Holder, userid, pkH)  ]
--[ Eq(checksign(proof, payload, pkH), true)
  , Eq(checksign(signature, digest, pkI), true)
  , Substring(hash(disclosure), digest)
    // Eq(hash(disclosure), prefixHash),
  , LPresentationVerify($Verifier, appid, payload, VP)
  , PassVerify(appid, Presentation)  ]->
  [ ]


lemma SourcesID[sources]:
  "All appid #i.  
      MustIssuer(appid)@i
    ==>
      (Ex #h. KU(appid) @ #h & #h < #i)
    | (Ex #h. Issuer(appid) @ #h)"



/* We assume that only one issuer */
/* We assume for the same appid ,there is only
 * on thread of verifier.
 */
/* A credential (VC） can be used to construct 
 * unbounded number of VP. We do not restrict
 * this feature.
 */
restriction SingleIssuerVerifier:
  "( All appid1 appid2 #i #j.
    Issuer(appid1)@i & Issuer(appid2)@j
    ==> #i = #j )
  & ( All appid #i #j.
    Verifier(appid)@i & Verifier(appid)@j
    ==> #i = #j )"



#ifdef exec
restriction AuthCodeReqOnce:
  "All Issuer appid #i #j.
      LIssurerAuthCodeRequest(Issuer, appid)@i
    & LIssurerAuthCodeRequest(Issuer, appid)@j
    ==> #i = #j"

restriction OnceConstructionVC:
  "All Issuer appid VC1 VC2 #i #j.
    LCredentialIssurance(Issuer, appid, VC1)@i
  & LCredentialIssurance(Issuer, appid, VC2)@j
  ==> #i = #j"



/* Here is an abstract for non-replay in TLS  */
restriction uniqueClientToServer:
  "All sess msg #i #j.
    TLSClientToServer(sess, msg)@i & TLSClientToServer(sess, msg)@j
    ==> #i = #j
  "

restriction uniqueJSAPI:
  "All msg #i #j.
    JSAPIgenerate(msg)@i & JSAPIgenerate(msg)@j
    ==> #i = #j"

restriction uniqueServerToClient:
  "All sess msg #i #j.
    TLSServerToClient(sess, msg)@i & TLSServerToClient(sess, msg)@j
    ==> #i = #j"


lemma Executability:
  exists-trace
  "Ex issuer appI verifier appV 
      userid lifeTime authCode
      cred VCdata payload ShowReq VP
      #t0 #t1 #t2 #t3 #t4 #t5 #t6 #t7.
      LIssurerAuthCodeRequest(issuer, appI)@t0
    & LAuthCodeGenerate(userid, lifeTime, authCode)@t1
    & LMFGetAuthCode(issuer, appI, authCode)@t2
    & LCredentialIssurance(issuer, appI, VCdata)@t3
    & LSuperAppStoreVC(userid, VCdata, cred)@t4
    & LVerifierShowPreReq(verifier, appV, ShowReq)@t5
    & LHolderPresentVP(userid, appV, VP)@t6
    & LPresentationVerify(verifier, appV, payload, VP)@t7
    & (not Ex #x. AdversaryActivity() @ #x)"
#endif


/* Goal 1*/
#ifdef secrecy
lemma SanityCheckCodeSecrcy:
  exists-trace
  "Ex r code #t1 #t2.
    UseCode(r, code) @ #t1 &  KU(code) @ #t2"
    
lemma SanityCheckTokensecrcy:
  exists-trace
  "Ex token #t1 #t2.
    IsToken(token) @ #t1 &  KU(token) @ #t2"


lemma CodeSecrecy[reuse]:
  "All issuer code #t1 #t2.
        ( UseCode(issuer, code) @ #t1
        & KU(code) @ #t2  )
    ==> 
        (Ex #x. CompromisedDomain(issuer) @ #x)"

lemma TokenSecrecy[reuse]:
    "All #i #j token. 
        IsToken(token)@i & KU(token)@j
      ==>
        (Ex r #x. CompromisedDomain(r) @ #x)"

/*=====================================================*/
/* Goal 1.1: Secrecy of claims that used in crendetial */
/*******************************************************/
/* This is a stronger secrecy lemma, which states that */
/* if all the intended claims used for the construction*/
/* of the credential are known by an adversary, then   */
/* either there exists a data leak from the database,  */
/* or some client of the TLS session is compromised.   */
/*******************************************************/
/* This lemma is falsified (now verified, as I add C4) */
/* because the disclosure claims can be obtained from  */
/* the presentation of VP, when the master (encrypted) */
/* key of the verifier is leaked.                      */
/*******************************************************/
/* An interesting finding, which I believe can be seen */
/* as a potential attack:                              */
/* - Consider two different VPs constructed from one   */
/*   credential, where the payloads of VP are:         */
/*   - p1 = Issuer_signed_JWT ++ disclosure1           */
/*   - p2 = Issuer_signed_JWT ++ disclosure2           */
/* - If cred = Issuer_signed_JWT ++ disclosure1 ++     */
/*   disclosure2, then all the claims can be obtained  */
/*   from the attack on the presentation of such two   */
/*   VPs.                                              */
/* - The attack succeeds when the master keys of the   */
/*   two verifiers are leaked.                         */
/*******************************************************/
lemma HolderClaimsSecrecy[reuse]:
  "All #i userid d p.
      DataBase(userid, d, p)@i
    ==>
        not (Ex #k #j. KU(d)@j & KU(p)@k)
      /* C1: Some client of a TLS session is compromised. */
      | ( Ex r #x. CompromisedDomain(r) @ #x)
      /* C2: The claims is leaked directly from the database. */
      | ( Ex #i data. LeakData(userid, data)@ #i)
      /* C3: The credential is leaked during issuance, 
              this is a serval attack, which may be infeasible in practice */
      | ( Ex #i #j #m app.
            MaliciousProgram('importVC', app)@i
          & Issuer(app)@m
          & CompromiseTEE(userid)@j ) 
      /* C4: All the claims can be collected from all different VPs */
      | ( Ex #i #j app1 app2. 
            MaliciousProgram('PresentVP', app1) @ #i
          & MaliciousProgram('PresentVP', app2) @ #j
          & not(app1 = app2))"



// lemma risk1[reuse, heuristic={secrecy}, hide_lemma=StrongSecrecyOfUseddata]:
//   "All #i userid d p.
//       DataBase(userid, d, p)@i
//     ==>
//         not (Ex #k #j. KU(d)@j & KU(p)@k)
//       /* C1: Some client of a TLS session is compromised. */
//       | ( Ex r #x. CompromisedDomain(r) @ #x)
//       /* C2: The claims is leaked directly from the database. */
//       | ( Ex #i data. LeakData(userid, data)@ #i)
//       /* C3: The credential is leaked during issuance, 
//               this is a serval attack, which may be infeasible in practice */
//       | ( Ex #i #j #m app.
//             MaliciousProgram('importVC', app)@i
//           & Issuer(app)@m
//           & CompromiseTEE(userid)@j )"


lemma risk1[reuse, heuristic={secrecy}, hide_lemma=StrongSecrecyOfUseddata]:
  "All credential VC userid #i.
    LSuperAppStoreVC(userid, VC, credential)@i 
    ==>
        not (Ex #k. KU(credential)@k)
      /* C1: Some client of a TLS session is compromised. */
      | ( Ex r #x. CompromisedDomain(r) @ #x)
      /* C2: The claims is leaked directly from the database. */
      | ( Ex #i data. LeakData(userid, data)@ #i)
      /* C3: The credential is leaked during issuance, 
              this is a serval attack, which may be infeasible in practice */
      | ( Ex #i #j #m app.
            MaliciousProgram('importVC', app)@i
          & Issuer(app)@m
          & CompromiseTEE(userid)@j )"



/*======================================================================*/
/*            Goal 1.2: Secrecy of Issuer Credential                    */
/*----------------------------------------------------------------------*/
/*   The undisclosed data and issued credential should remain private   */
/*----------------------------------------------------------------------*/
lemma secrecyOfCredential[heuristic={secrecyOfCredential}]:
    "All credential VC userid #i.
        LSuperAppStoreVC(userid, VC, credential)@i 
      ==>
          not (Ex #j. K(credential)@j)
          /* C1: There must be a TEE compromised */
          | ( Ex #i. CompromiseTEE(userid)@i ) 
          /*** If there is no TEE compromised, then all the claims should ***/
          /*** be obtained. Both C2.1 and C2.2 depicts how all the claims ***/
          /*** can be known by the adversary, i.e., ***/
          /* C2.1: there exists some TLS session unsecured */
          | ( Ex r #x. CompromisedDomain(r) @ #x)
          /* C2.2: some claims are leaked directly from database */
          | ( Ex #i data. LeakData(userid, data)@ #i)
          /***  C3 is a more subtle way to recover credential, it does not ***/
          /***  need any explict data leak. it states that: ***/
          /* C3: the complete credential can be recovered from all the VP  ***/
          /* more specifically, if all the verifiers' secrecy key is leaked  */
          /* the attack indeed work. */
          | ( Ex #i #j app1 app2. 
                  MaliciousProgram('PresentVP', app1) @ #i
                & MaliciousProgram('PresentVP', app2) @ #j
                & not(app1 = app2))"
#endif


/* Goal 2*/
/** The Issuer should be legal, otherwise, VC is forgeable. */
#ifdef integrity

lemma NonInjectAuthVCIssurance[reuse, heuristic={exec}]:
  "All #i userid data credential.
    SuperAppVC(userid, data, credential)@i
    ==>
      ( Ex #j Issuer appid data.
          LCredentialIssurance(Issuer, appid, data)@j
        & #j < #i) 
    | ( Ex appid ltk #i. Reaveal(appid, ltk)@i)
    "


/*======================================================================*/
/*                        Goal 2: Integrity                             */
/*----------------------------------------------------------------------*/
/*   The obtained credential is issued from the intended issuer, which  */
/*   cannot be tampered with or forged by an adversary.                 */
/*======================================================================*/

lemma integrityOfVC[hide_lemma=NonInjectAuthVCIssurance, heuristic={integrity}]:
/* The property is formalize as an non-injective agreement */
    "All #i userid data credential.
      SuperAppVC(userid, data, credential)@i
      ==>
        ( Ex #j appid.
            IssueVC(appid, credential)@j
          & #j < #i) 
          | ( Ex appid ltk #i. Reaveal(appid, ltk)@i)"
#endif



#ifdef goal3
/** Goal3 is satisfied in this model, i.e., this is no replay attack of VP:
 * Different verifier (with different appid) accept different VP
 * and there is only one time presentation.
 * which corresponds to restriction UniqueVP*/
/* We can use informal method to analyze and get an replay attack,
 * but this lemma gives us an advice how we can prevent such attack*/
lemma UniquePass:
  "All VP appid #i.
        PassVerify(appid, VP)@i 
      ==>
      Ex userid #j. 
        HolderPresent(userid, VP)@j & #j < #i
      & not( Ex verifier #k. 
          PassVerify(verifier, VP)@k & not( #k = #i ) )"

#endif



#ifdef goal5
/*******************************************************/
/* After verifying the presentation of a certain       */
/* credential, the verifier can only obtain claims     */
/* that are a subset of the claims contained within    */
/* the credential issuance.                            */
/*******************************************************/

lemma SelectiveDisclosure:
  "All #i #j userid VCdata cred verifier appV payload VP.
      LSuperAppStoreVC(userid, VCdata, cred)@i
    & LPresentationVerify(verifier, appV, payload, VP)@j
    & (not Ex #x. AdversaryActivity() @ #x)
    ==>
      (Ex prefix D d. 
          cred = <prefix, D> 
        & payload = <prefix, d> 
        & d << D)"


/* This is a stronger property, which rules that d is the 
 * strict subset of D. */
lemma StrictSelectiveDisclosure:
  "All #j verifier appV payload VP.
      // LSuperAppStoreVC(userid, VCdata, cred)@i
      LPresentationVerify(verifier, appV, payload, VP)@j
    & (not Ex #x. AdversaryActivity() @ #x)
    ==>
      Ex userid VCdata cred #i.
          LSuperAppStoreVC(userid, VCdata, cred)@i
        & ( Ex prefix D d. 
            cred = <prefix, D> 
          & payload = <prefix, d> 
          & d << D
          & not (D << d))"

#endif

end