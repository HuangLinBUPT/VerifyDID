theory DID begin

builtins: natural-numbers, multiset

heuristic: o "oracleDID"

functions: 
pk/1, aenc/2, adec/2,
senc/2, sdec/2,
sign/2, checksign/3, true/0,
hash/1,
maskedID/2

equations: sdec(senc(x, k), k) = x
equations: adec(aenc(x, pk(k)), k) = x
equations: checksign(sign(m, k), m, pk(k)) = true

/*
restriction equal:
  "All a b #i. Eq(a, b)@i ==> a = b"
  */

  /*
restriction Substring:
  "All a b #i. Substring(a, b)@i ==> a << b"
  */

#include "../TLS.spthy"
#include "../tactics"

/*=== Phone Initialization ===*/
rule Phone[color=#004225]:
  []
  --[ ClaimNumber($A, $Number)
    , IsPhoneNumber($Number) ]->
  [ !Phone($A, $Number) ]

rule InstallSuperAppClient[color=#a3c1ad]:
   [  !Phone($UserName, $Number)
   ,  Fr(~userid)
   , Fr(~sensitiveData)
   ,  Fr(~disclosure)
   ,  Fr(~k) ]
--[ InstallSuperApp($UserName, $Number, ~userid)
  , DataBase(~userid, ~disclosure, ~sensitiveData) ]->
   [ !SuperApp($UserName, $Number, ~userid)
   , !Server($UserName, $Number, ~userid) 
   , !DB(~userid, ~disclosure, ~sensitiveData) ]

restriction uniqueUserAccount:
  "All name1 name2 number1 number2 userid1 userid2 #i #j.
      InstallSuperApp(name1, number1, userid1)@i 
    & InstallSuperApp(name2, number2, userid2)@j
    ==> 
      #i = #j & name1 = name2 & number1 = number2
    & userid1 = userid2"

rule SuperAppSetUp:
  [ !SuperApp($userName, $Number, userid)
  , Fr(~k)  ]
--[ SetupKey(userid, ~k)
  , RegisterDIDdocument($Holder, $context, pk(~k)) ]->
  [ !TEELTK($Holder, userid, ~k)
  , !TEEPK($Holder, userid, pk(~k))
  , !DID(<'context', $context>, <'id', $Holder>, <'auth', pk(~k)>) 
  , Out(pk(~k)) ]

restriction uniqueClientKey:
  "All userid k1 k2 #i #j.
      SetupKey(userid, k1)@i 
    & SetupKey(userid, k2)@j
    ==> #i = #j"

restriction legalInitalReq:
  "not Ex sess #i #j.
    InitSession(sess)@i & !KU(sess)@j"

restriction uniqueJSAPI:
  "All msg #i #j.
    JSAPIchannel(msg)@i & JSAPIchannel(msg)@j
    ==> #i = #j"

/*
restriction UniqueRole:
  "not Ex #i #j appid.
    Issuer(appid)@i & Verifier(appid)@j"
*/

/*
restriction SingleIssuerVerifier:
  "(All appid1 appid2 #i #j.
    Issuer(appid1)@i & Issuer(appid2)@j
    ==> #i = #j)
  & (All appid #i #j.
    Verifier(appid)@i & Verifier(appid)@j
    ==> #i = #j)"
*/

restriction AuthCodeReqOnce:
  "All Issuer appid #i #j.
    LIssurerAuthCodeRequest(Issuer, appid)@i &
    LIssurerAuthCodeRequest(Issuer, appid)@j
    ==> #i = #j"

/*
restriction OnceConstructionVC:
  "All Issuer appid VC1 VC2 #i #j.
    LCredentialIssurance(Issuer, appid, VC1)@i &
    LCredentialIssurance(Issuer, appid, VC2)@j
    ==> #i = #j"
*/

rule RevealSuperAppKey[color=#e52b50]:
  [!TEELTK($Holder, userid, k)]
--[ CompromiseTEE(userid),
    AdversaryActivity() ]->
  [ Out(k)  ]

rule LeakSenstiveData[color=#e52b50]:
  [ !DB(userid, disclosure, sensitiveData)  ]
--[ LeakData(userid, sensitiveData),
    LeakData(userid, disclosure),
    AdversaryActivity() ]->
  [ Out(disclosure)
  , Out(sensitiveData) ]

rule MiniprogramRegister[color=#fff8e7]:
  [ Fr(~appid)
  , Fr(~openid)
  , Fr(~k)
  , !SuperApp($UserName, $Number, ~userid)]
--[ MiniprogramRegister($A, ~userid, ~appid) ]->
  [ !MiniProgram($A, ~openid, ~appid)
  , !MLTK($A, ~appid, ~k)
  , !MPK($A, ~appid, pk(~k))
  , Out(pk(~k))
  , !DID(<'context', $context>, <'id', $A>, <'auth', pk(~k)>) ]

rule RevealMiniProgramPrivKey[color=#e52b50]:
  [ !MLTK($A, appid, ltk)]
--[ Reaveal(appid, ltk),
    AdversaryActivity() ]->
  [ Out(<appid, ltk>)  ]

rule AuthCodeRequest[color=#fdd5b1]:
  [ !MiniProgram($Issuer, openid, appid)
  , !SuperApp($UserName, $Number, ~userid)
  , Fr(~sess) ]
--[ Issuer(appid)
  , LIssurerAuthCodeRequest($Issuer, appid) ]->
  [ St_MP_AuthCodeReq($Issuer, ~sess, openid, appid),
    TLSClient_Out('GET', ~sess, $Issuer, <'userInfo', appid, 'req'>) ]

rule SuperAppGenerateAuthCode[color=#6495ed]:
  [ TLSServer_In('GET', ~sess, $Issuer, <'userInfo', appid, 'req'>)
  , !SuperApp($UserName, $Number, userid)
  , Fr(~authCode)
  , In(%lifeTime) ]
--[ LAuthCodeGenerate(userid, %lifeTime, ~authCode)
  , IsSession(~sess)
  , InitSession(~sess)
  , MustIssuer(appid) ]->
  [ TLSServer_Out('GET', ~sess, $Issuer, <'authCode', appid, ~authCode>)
  , St_SA_IssueCode($UserName, $Issuer, appid, ~authCode)
  , AuthCode(~authCode)  ]

rule MPgetAuthCode[color=#fdd5b1]:
  [ St_MP_AuthCodeReq($Issuer, sess, openid, appid)
  , TLSClient_In('GET', sess, $Issuer, <'authCode', appid, authCode>)
  , Fr(~sessPost) ]
--[ LMFGetAuthCode($Issuer, appid, authCode)
  , StartSession(~sessPost)
  , IsAuthCode(authCode) ]->
  [ St_MP_TokenReq($Issuer, openid, appid, authCode)
  , TLSClient_Out('POST', ~sessPost, $Issuer, <'token_req', appid, authCode>) ]

rule SuperAppAuthEndPointGenerateToken[color=#6495ED]:
  [ TLSServer_In('POST', ~sess, $Issuer, <'token_req', appid, authCode>)
  , St_SA_IssueCode($UserName, $Issuer, appid, authCode)
  , !SuperApp($UserName, $Number, userid)
  , Fr(~token) ]
--[ IsSession(~sess)
  , UseCode($Issuer, authCode) ]->
  [ TLSServer_Out('POST', ~sess, $Issuer, <'token_consume', appid, ~token>)
  , St_SA_DistributeToken($UserName, $Issuer, appid, ~token)
  , Token(~token) ]

rule MBCallInfoShareAPI[color=#FDFD96]:
  [ St_MP_TokenReq($Issuer, openid, appid, authCode)
  , TLSClient_In('POST', ~sess, $Issuer, <'token_consume', appid, token>)
  , Fr(~sessCall) ]
--[ IsSession(~sess)
  , StartSession(~sessCall) ]->
  [ St_MB_CallInfoShare($Issuer, openid, appid, token)
  , TLSClient_Out('GET', ~sessCall, $Issuer, <'accessInfoReq', appid, token>) ]

rule SuperAppReturnValue[color=#6495ED]:
  [ TLSServer_In('GET', ~sess, $Issuer, <'accessInfoReq', appid, token>)
  , St_SA_DistributeToken($UserName, $Issuer, appid, token)
  , !DB(userid, disclosure, sensitiveData)
  , Fr(~undisclosed)]
--[ IsSession(~sess)
  , IsToken(token)
  , Issuer(appid) ]->
  [ TLSServer_Out('GET', ~sess, $Issuer, <'accessInfo', appid, <disclosure, ~undisclosed>>)
  , !UndisclosedData($UserName, ~undisclosed)]

rule MBgetSentitiveData[color=#FDFD96]:
  [ St_MB_CallInfoShare($Issuer, openid, appid, token)
  , TLSClient_In('GET', ~sess, $Issuer, <'accessInfo', appid, <disclosure, sensitiveData>>)]
--[ LMBGetSensitiveData(appid, <disclosure, sensitiveData>)
  , IsSession(~sess) ]->
  [ !MBDB($Issuer, openid, appid, <disclosure, sensitiveData>) ]

rule MBConstructCredential[color=#FDFD96]:
  let digest = hash(disclosure) ++ hash(sensitiveData)
      Issuer_signed_JWT = <digest, sign(digest, PrivKey)>
      credential = <Issuer_signed_JWT, disclosure ++ sensitiveData>
      envelope_key_encrypted = aenc(~envelope_key, pubKey)
      VC_data = <senc(Issuer_signed_JWT, ~envelope_key), envelope_key_encrypted>
  in
  [ !MBDB($Issuer, openid, appid, <disclosure, sensitiveData>)
  , !MLTK($Issuer, appid, PrivKey)
  , !TEEPK($Holder, userid, pubKey)
  , Fr(~envelope_key)
  , Fr(~sess) ]
--[ LCredentialIssurance($Issuer, appid, VC_data)
  , SignJWT(Issuer_signed_JWT)
  , IssueVC(appid, credential)
  , StartSession(~sess) ]->
  [ JSAPI_Out('importVC', appid, VC_data) ]

rule JSAPIOut[color=#FFFFFF]:
  [ JSAPI_Out(NameAPI, id, msg) ]
  -->
  [ !JSAPI(NameAPI, id, msg) ]

/*
rule Z_JSAPICompromised[color=#FF6961]:
  [ !JSAPI(NameAPI, id, msg) ]
  --[ MaliciousProgram(NameAPI, id)
    , AdversaryActivity() ]->
  [ Out(<id, msg>) ]
   */

  /*
rule AdversaryJSAPI_out[color=#FFFFFF]:
  [ In(NameAPI), In(id), In(msg) ]
--[ MaliciousProgram(NameAPI, id)
  , AdversaryActivity() ]->
  [ !JSAPI(NameAPI, id, msg) ]
  */

rule JSAPIIn[color=#FFFFFF]:
  [ !JSAPI(NameAPI, id, msg) ]
  --[ JSAPIchannel(msg) ]->
  [ JSAPI_In(NameAPI, id, msg) ]

rule SuperAppStoreVC[color=#6495ED]:
  let pkH = pk(skH)
      digest = hash(disclosure) ++ hash(sensitiveData)  
      Issuer_signed_JWT = <digest, signature>
      credential = <Issuer_signed_JWT, disclosure ++ sensitiveData> 
      envelope_key_encrypted = aenc(envelope_key, pkH)
      VC_data = <senc(Issuer_signed_JWT, envelope_key), envelope_key_encrypted>
  in
  [ JSAPI_In('importVC', appid, VC_data)
  , !SuperApp($UserName, $Number, userid)
  , !MPK($Issuer, appid, pkI)
  , !TEELTK($Holder, userid, skH)
  , !DB(userid, disclosure, sensitiveData) ]
--[ Eq(checksign(signature, digest, pkI), true)
  , LSuperAppStoreVC(userid, VC_data,credential)
  , SuperAppVC(userid, VC_data, credential) ]->
  [ !VC(userid, credential) ]

lemma Executability:
  exists-trace
  "Ex Issuer appI userid lifeTime authCode token sensitiveData VCdata
       #t0 #t1 #t2 #t3 #t4 #t5 #t6 #t7.
      LIssurerAuthCodeRequest(Issuer, appI)@t0
    & LAuthCodeGenerate(userid, lifeTime, authCode)@t1
    & LMFGetAuthCode(Issuer, appI, authCode)@t2
    & UseCode(Issuer, authCode)@t3
    & IsToken(token)@t4
    & LMBGetSensitiveData(appI, sensitiveData)@t5
    & LCredentialIssurance(Issuer, appI, VCdata)@t6
    & JSAPIchannel(VCdata)@t7
    & #t0 < #t1
    & #t1 < #t2
    & #t2 < #t3
    & #t3 < #t4
    & #t4 < #t5
    & #t5 < #t6
    & #t6 < #t7
    & (not Ex #x. AdversaryActivity() @ #x)"

end