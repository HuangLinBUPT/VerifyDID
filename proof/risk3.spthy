theory DID begin

// Function signature and definition of the equational theory E

builtins: multiset, natural-numbers
functions: adec/2, aenc/2, checksign/3, fst/1, fsys/1, gsys/1,
           hc/1, pair/2, pk/1, sdec/2, senc/2, sign/2, snd/1, true/0
equations:
    adec(aenc(x, pk(k)), k) = x,
    checksign(sign(m, k), m, pk(k)) = true,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x, k), k) = x,
    snd(<x.1, x.2>) = x.2

tactic: exec
presort: s
prio: {id}
  regex".*St_MF_PresentReq.*\(.*"
prio: {id}
  regex".*TEELTK\(.*"
prio: {id}
  regex".*MPK\(.*"
prio: {id}
  regex".*VC\(.*"
prio: {id}
  regex".*TLS.*_In\(.*"
prio: {id}
  regex".*St_MFAuthCode.*\(.*"
prio: {id}
  regex".*MF\(.*"
prio: {id}
  regex".*St_\(.*"
prio: {id}
  regex".*SuperAppClient\(.*"
deprio: {id}
  regex".*⊏.*\+x.*"
deprio: {id}
  regex".*⊏.*"


tactic: secrecy
presort: s
prio: {id}
  regex".*St_MF_PresentReq.*\(.*"
prio: {id}
  regex".*TEELTK\(.*"
prio: {id}
  regex".*MPK\(.*"
prio: {id}
  regex".*VC\(.*"
prio: {id}
  regex".*St_MFAuthCode.*\(.*"
prio: {id}
  regex".*MF\(.*"
prio: {id}
  regex".*St_\(.*"
prio: {id}
  regex".*SuperAppClient\(.*"
deprio: {id}
  regex".*TLS.*_In"
deprio: {id}
  regex".*⊏.*\+x.*"
deprio: {id}
  regex".*⊏.*"


tactic: executability
presort: s
prio: {id}
  regex".*MF\(.*"
prio: {id}
  regex".*St_\(.*"
prio: {id}
  regex".*TLSServer_In\(.*"
prio: {id}
  regex".*TLSClient_In\(.*"
prio: {id}
  regex".*MB\(.*"
deprio: {id}
  regex".*⊏.*\+x.*"
deprio: {id}
  regex".*⊏.*"
deprio: {id}
  regex".*SuperAppClient\(.*"
deprio: {id}
  regex".*SuperAppServer\(.*"


tactic: claimSecrecy
presort: s
prio: {id}
  regex".*!MB.*"
prio: {id}
  regex"∀.*"
prio: {id}
  regex"TLSServer.*"
prio: {id}
  regex".*!MLTK.*"
prio: {id}
  regex".*TEEPK.*"
prio: {id}
  regex"!KU\(~n0.*"
prio: {id}
  regex"!KU\(~n1.*"
prio: {id}
  regex"!KU\(fsys\(.*"
prio: {id}
  regex"!KU\(gsys\(.*"


tactic: secrecyOfCredential
presort: s
prio: {id}
  regex".*!SuperApp\(.*"
prio: {id}
  regex".*MPK\(.*"
prio: {id}
  regex".*TEELTK\(.*"
prio: {id}
  regex".*DB\(.*"
prio: {id}
  regex"∀.*"
prio: {id}
  regex"!KU\(sign\(.*"
prio: {id}
  regex"!KU\(~envelope_key.*"
prio: {id}
  regex"!KU\(~k.*"


tactic: CodeSecrecy
presort: s
deprio: {id}
  regex"!KU\(~sess.*"


tactic: TokenSecrecy
presort: s
prio: {id}
  regex".*St_.*"
prio: {id}
  regex".*DB\(.*"
prio: {id}
  regex"TLSServer.*"
prio: {id}
  regex"!KU\(~token.*"
deprio: {id}
  regex"!KU\(~sess\)"


tactic: integrity
presort: s
prio: {id}
  regex".*!SuperApp\(.*"
prio: {id}
  regex".*MPK\(.*"
prio: {id}
  regex".*TEELTK\(.*"
prio: {id}
  regex".*DB\(.*"
prio: {id}
  regex".*MLTK\(.*"
prio: {id}
  regex".*TEEPK\(.*"
prio: {id}
  regex".*!JSAPI\(.*"
prio: {id}
  regex"!KU\(senc\(.*"
prio: {id}
  regex"!KU\(sign\(.*"
prio: {id}
  regex"!KU\(~k.*"


tactic: UniquePass
presort: s
prio: {id}
  regex".*St_MF_PresentReq.*\(.*"
prio: {id}
  regex".*∥.*"
prio: {id}
  regex".*MLTK\(.*"
prio: {id}
  regex"!KU\(~envkey.*"
prio: {id}
  regex"!KU\(~k.*"
prio: {id}
  regex"!KU\(aenc\(envkey.*"
prio: {id}
  regex"!KU\(senc\(.*"
prio: {id}
  regex"!KU\(sign\(.*"


tactic: SelectiveDisclosure
presort: s
prio: {id}
  regex".*St_MF_PresentReq.*\(.*"
prio: {id}
  regex".*∥.*"
prio: {id}
  regex".*⊏.*"
prio: {id}
  regex"!KU\(senc\(.*"
prio: {id}
  regex"!KU\(sign\(.*"
prio: {id}
  regex".*MLTK\(.*"
prio: {id}
  regex"!KU\(~envelope_key.*"
prio: {id}
  regex"!KU\(~k.*"
prio: {id}
  regex"!KU\(aenc\(envelope_key.*"


tactic: authStoreVC
presort: s
prio: {id}
  regex"!KU\(.*sign\(<.*"
prio: {id}
  regex"!KU\(~k.*"









restriction equal:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction Substring:
  "∀ a b #i. (Substring( a, b ) @ #i) ⇒ (a ⊏ b)"
  // safety formula

rule (modulo E) Domain:
   [ ] --> [ !Domain( $Domain ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DomainCompromise:
   [ !Domain( $Domain ) ]
  --[ CompromisedDomain( $Domain ), AdversaryActivity( ) ]->
   [ !DomainCompromise( $Domain ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSClientOut[color=#ffffff]:
   [ TLSClient_Out( method, ~sess, $Domain, msg ), !Domain( $Domain )
   ]
  -->
   [ !TLSClient( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSAdversaryClientOut[color=#ff6961]:
   [ In( method ), In( ~sess ), In( msg ), !Domain( $Domain ) ]
  --[ AdversaryActivity( ) ]->
   [ !TLSClient( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSServerOut[color=#ffffff]:
   [ TLSServer_Out( method, ~sess, $Domain, msg ), !Domain( $Domain )
   ]
  -->
   [ !TLSServer( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSAdversaryServerOut[color=#ff6961]:
   [
   In( method ), In( ~sess ), In( msg ), !DomainCompromise( $Domain )
   ]
  --[ AdversaryActivity( ) ]->
   [ !TLSServer( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSClientToServer[color=#ffffff]:
   [ !TLSClient( method, ~sess, $Domain, msg ) ]
  --[ TLSClientToServer( ~sess, msg ) ]->
   [ TLSServer_In( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSClientToAdversaryServer[color=#ff6961]:
   [
   !TLSClient( method, ~sess, $Domain, msg ),
   !DomainCompromise( $Domain )
   ]
  --[ AdversaryActivity( ) ]->
   [ Out( msg ), Out( ~sess ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSServerToClient[color=#ffffff]:
   [ !TLSServer( method, ~sess, $Domain, msg ) ]
  --[ TLSServerToClient( ~sess, msg ) ]->
   [ TLSClient_In( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSServerToAdversaryClient[color=#ff6961]:
   [
   In( ~adversarySess ),
   !TLSServer( method, ~adversarySess, $Domain, msg )
   ]
  --[ AdversaryActivity( ) ]->
   [ Out( msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) JSAPIOut[color=#ffffff]:
   [ JSAPI_Out( NameAPI, id, msg ) ]
  -->
   [ !JSAPI( NameAPI, id, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Z_JSAPICompromised[color=#ff6961]:
   [ !JSAPI( NameAPI, id, msg ) ]
  --[ MaliciousProgram( NameAPI, id ), AdversaryActivity( ) ]->
   [ Out( <id, msg> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) AdversaryJSAPI_out[color=#ffffff]:
   [ In( NameAPI ), In( id ), In( msg ) ]
  --[ MaliciousProgram( NameAPI, id ), AdversaryActivity( ) ]->
   [ !JSAPI( NameAPI, id, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) JSAPIIn[color=#ffffff]:
   [ !JSAPI( NameAPI, id, msg ) ]
  --[ JSAPIgenerate( msg ) ]->
   [ JSAPI_In( NameAPI, id, msg ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Phone[color=#004225]:
   [ ]
  --[ ClaimNumber( $A, $Number ), IsPhoneNumber( $Number ) ]->
   [ !Phone( $A, $Number ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) InstallSuperAppClient[color=#a3c1ad]:
   [
   !Phone( $UserName, $Number ), Fr( ~userid ), Fr( ~data0 ),
   Fr( ~data1 ), Fr( ~k )
   ]
  --[
  InstallSuperApp( $UserName, $Number, ~userid ),
  DataBase( ~userid, ~data0, ~data1 )
  ]->
   [
   !SuperApp( $UserName, $Number, ~userid ),
   !Server( $UserName, $Number, ~userid ),
   !DB( ~userid, ~data0, ~data1 )
   ]

  /* has exactly the trivial AC variant */

restriction uniqueUserAccount:
  "∀ name1 name2 number1 number2 userid1 userid2 #i #j.
    ((InstallSuperApp( name1, number1, userid1 ) @ #i) ∧
     (InstallSuperApp( name2, number2, userid2 ) @ #j)) ⇒
    ((((#i = #j) ∧ (name1 = name2)) ∧ (number1 = number2)) ∧
     (userid1 = userid2))"
  // safety formula

rule (modulo E) SuperAppSetUp:
   [ Fr( ~k ), !SuperApp( $userName, $Number, userid ) ]
  --[
  SetupKey( userid, ~k ),
  RegisterDIDdocument( $Holder, $context, pk(~k) )
  ]->
   [
   !TEELTK( $Holder, userid, ~k ), !TEEPK( $Holder, userid, pk(~k) ),
   !DID( <'context', $context>, <'id', $Holder>, <'auth', pk(~k)> ),
   Out( pk(~k) )
   ]

  /* has exactly the trivial AC variant */

restriction uniquClientKey:
  "∀ userid k1 k2 #i #j.
    ((SetupKey( userid, k1 ) @ #i) ∧ (SetupKey( userid, k2 ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

rule (modulo E) RevealSuperAppKey[color=#e52b50]:
   [ !TEELTK( $Holder, userid, k ) ]
  --[ CompromiseTEE( userid ), AdversaryActivity( ) ]->
   [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LeakSenstiveData[color=#e52b50]:
   [ !DB( userid, data0, data1 ) ]
  --[
  LeakData( userid, data0 ), LeakData( userid, data1 ),
  AdversaryActivity( )
  ]->
   [ Out( data0 ), Out( data1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MiniprogramRegister[color=#fff8e7]:
   [
   Fr( ~appid ), Fr( ~openid ), Fr( ~k ),
   !SuperApp( $UserName, $Number, ~userid )
   ]
  --[ MiniprogramRegister( $A, ~userid, ~appid ) ]->
   [
   !MiniProgram( $A, ~openid, ~appid ), !MLTK( $A, ~appid, ~k ),
   !MPK( $A, ~appid, pk(~k) ), Out( pk(~k) ),
   !DID( <'context', $context>, <'id', $A>, <'auth', pk(~k)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) RevealMiniProgramPrivKey[color=#e52b50]:
   [ !MLTK( $A, appid, ltk ) ]
  --[ Reaveal( appid, ltk ), AdversaryActivity( ) ]->
   [ Out( <appid, ltk> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) AuthCodeRequest[color=#fdd5b1]:
   [
   !MiniProgram( $Issuer, openid, appid ),
   !SuperApp( $UserName, $Number, ~userid ), Fr( ~sess )
   ]
  --[ Issuer( appid ), LIssurerAuthCodeRequest( $Issuer, appid ) ]->
   [
   St_MP_AuthCodeReq( $Issuer, ~sess, openid, appid ),
   TLSClient_Out( 'GET', ~sess, $Issuer, <'userInfo', appid, 'req'> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SuperAppGenerateAuthCode[color=#6495ed]:
   [
   TLSServer_In( 'GET', ~sess, $Issuer, <'userInfo', appid, 'req'> ),
   !SuperApp( $UserName, $Number, userid ), Fr( ~authCode )
   ]
  --[
  LAuthCodeGenerate( userid, ~authCode ), IsSession( ~sess ),
  InitSession( ~sess ), MustIssuer( appid )
  ]->
   [
   TLSServer_Out( 'GET', ~sess, $Issuer,
                  <'authCode', appid, ~authCode>
   ),
   St_SA_IssueCode( $UserName, $Issuer, appid, ~authCode ),
   AuthCode( ~authCode )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

restriction legalInitalReq:
  "¬(∃ sess #i #j. (InitSession( sess ) @ #i) ∧ (!KU( sess ) @ #j))"
  // safety formula

rule (modulo E) MPgetAuthCode[color=#fdd5b1]:
   [
   St_MP_AuthCodeReq( $Issuer, sess, openid, appid ),
   TLSClient_In( 'GET', sess, $Issuer, <'authCode', appid, authCode>
   ),
   Fr( ~sessPost )
   ]
  --[
  LMFGetAuthCode( $Issure, appid, authCode ),
  StartSession( ~sessPost ), IsAuthCode( authCode )
  ]->
   [
   St_MP_TokenReq( $Issuer, openid, appid, authCode ),
   TLSClient_Out( 'POST', ~sessPost, $Issuer,
                  <'token_req', appid, authCode>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SuperAppAuthEndPointGenerateToken[color=#6495ed]:
   [
   TLSServer_In( 'POST', ~sess, $Issuer,
                 <'token_req', appid, authCode>
   ),
   St_SA_IssueCode( $UserName, $Issuer, appid, authCode ),
   !SuperApp( $UserName, $Number, userid ), Fr( ~token )
   ]
  --[ IsSession( ~sess ), UseCode( $Issuer, authCode ) ]->
   [
   TLSServer_Out( 'POST', ~sess, $Issuer,
                  <'token_consume', appid, ~token>
   ),
   St_SA_DistributeToken( $UserName, $Issuer, appid, ~token ),
   Token( ~token )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) MBCallInfoShareAPI[color=#fdfd96]:
   [
   St_MP_TokenReq( $Issuer, openid, appid, authCode ),
   TLSClient_In( 'POST', ~sess, $Issuer,
                 <'token_consume', appid, token>
   ),
   Fr( ~sessCall )
   ]
  --[ IsSession( ~sess ), StartSession( ~sessCall ) ]->
   [
   St_MB_CallInfoShare( $Issuer, openid, appid, token ),
   TLSClient_Out( 'GET', ~sessCall, $Issuer,
                  <'accessInfoReq', appid, token>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SuperAppReturnValue[color=#6495ed]:
   [
   TLSServer_In( 'GET', ~sess, $Issuer,
                 <'accessInfoReq', appid, token>
   ),
   St_SA_DistributeToken( $UserName, $Issuer, appid, token ),
   !DB( userid, data0, data1 )
   ]
  --[ IsSession( ~sess ), IsToken( token ) ]->
   [
   TLSServer_Out( 'GET', ~sess, $Issuer,
                  <'accessInfo', appid, data0, data1>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) MBgetSentitiveData[color=#fdfd96]:
   [
   St_MB_CallInfoShare( $Issuer, openid, appid, token ),
   TLSClient_In( 'GET', ~sess, $Issuer,
                 <'accessInfo', appid, data0, data1>
   )
   ]
  --[
  LMBGetSensitiveData( appid, <data0, data1> ), IsSession( ~sess )
  ]->
   [ !MBDB( $Issuer, openid, appid, <data0, data1> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MBConstructCredential[color=#fdfd96]:
   [
   !MBDB( $Issuer, openid, appid, <data0, data1> ),
   !MLTK( $Issuer, appid, skI ), !TEEPK( $Holder, userid, pkH ),
   Fr( ~n0 ), Fr( ~n1 ), Fr( ~envkey ), Fr( ~sess )
   ]
  --[
  SignJWT( <
            (hc(fsys(<data0, data1, ~n0>))++hc(gsys(<data0, data1, ~n1>))), 
            sign((hc(fsys(<data0, data1, ~n0>))++hc(gsys(<data0, data1, ~n1>))
                 ),
                 skI)
           >
  ),
  SynClaims( (fsys(<data0, data1, ~n0>)++gsys(<data0, data1, ~n1>))
  ),
  IssueVC( appid,
           <
            <(hc(fsys(<data0, data1, ~n0>))++hc(gsys(<data0, data1, ~n1>))), 
             sign((hc(fsys(<data0, data1, ~n0>))++hc(gsys(<data0, data1, ~n1>))
                  ),
                  skI)
            >, 
            (fsys(<data0, data1, ~n0>)++gsys(<data0, data1, ~n1>))>
  ),
  StartSession( ~sess ),
  LCredentialIssurance( $Issuer, appid,
                        <
                         senc(<
                               (hc(fsys(<data0, data1, ~n0>))++hc(gsys(<data0, data1, ~n1>))), 
                               sign((hc(fsys(<data0, data1, ~n0>))++hc(gsys(<data0, data1, ~n1>))
                                    ),
                                    skI)
                              >,
                              ~envkey), 
                         aenc(~envkey, pkH)>
  )
  ]->
   [
   Receipt0( ~n0, ~n1 ),
   JSAPI_Out( 'importVC', appid,
              <
               senc(<
                     (hc(fsys(<data0, data1, ~n0>))++hc(gsys(<data0, data1, ~n1>))), 
                     sign((hc(fsys(<data0, data1, ~n0>))++hc(gsys(<data0, data1, ~n1>))
                          ),
                          skI)
                    >,
                    ~envkey), 
               aenc(~envkey, pkH)>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SuperAppStoreVC[color=#6495ed]:
   [
   JSAPI_In( 'importVC', appid,
             <
              senc(<
                    (hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), 
                    signature>,
                   envkey), 
              aenc(envkey, pk(skH))>
   ),
   Receipt0( n0, n1 ), !SuperApp( $UserName, $Number, userid ),
   !MPK( $Issuer, appid, pkI ), !TEELTK( $Holder, userid, skH ),
   !DB( userid, data0, data1 )
   ]
  --[
  Eq( checksign(signature,
                (hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), pkI),
      true
  ),
  StoreVC( userid,
           <
            <(hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), 
             signature>, 
            (fsys(<data0, data1, n0>)++gsys(<data0, data1, n1>))>
  ),
  SuperAppVC( userid,
              <
               senc(<
                     (hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), 
                     signature>,
                    envkey), 
               aenc(envkey, pk(skH))>,
              <
               <(hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), 
                signature>, 
               (fsys(<data0, data1, n0>)++gsys(<data0, data1, n1>))>
  ),
  LSuperAppStoreVC( userid,
                    <
                     senc(<
                           (hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), 
                           signature>,
                          envkey), 
                     aenc(envkey, pk(skH))>,
                    <
                     <(hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), 
                      signature>, 
                     (fsys(<data0, data1, n0>)++gsys(<data0, data1, n1>))>
  )
  ]->
   [
   !VC( userid,
        <
         <(hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), 
          signature>, 
         (fsys(<data0, data1, n0>)++gsys(<data0, data1, n1>))>
   )
   ]

  /*
  rule (modulo AC) SuperAppStoreVC[color=#6495ed]:
     [
     JSAPI_In( 'importVC', appid,
               <
                senc(<
                      (hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), 
                      signature>,
                     envkey), 
                aenc(envkey, pk(skH))>
     ),
     Receipt0( n0, n1 ), !SuperApp( $UserName, $Number, userid ),
     !MPK( $Issuer, appid, pkI ), !TEELTK( $Holder, userid, skH ),
     !DB( userid, data0, data1 )
     ]
    --[
    Eq( z, true ),
    StoreVC( userid,
             <
              <(hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), 
               signature>, 
              (fsys(<data0, data1, n0>)++gsys(<data0, data1, n1>))>
    ),
    SuperAppVC( userid,
                <
                 senc(<
                       (hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), 
                       signature>,
                      envkey), 
                 aenc(envkey, pk(skH))>,
                <
                 <(hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), 
                  signature>, 
                 (fsys(<data0, data1, n0>)++gsys(<data0, data1, n1>))>
    ),
    LSuperAppStoreVC( userid,
                      <
                       senc(<
                             (hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), 
                             signature>,
                            envkey), 
                       aenc(envkey, pk(skH))>,
                      <
                       <(hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), 
                        signature>, 
                       (fsys(<data0, data1, n0>)++gsys(<data0, data1, n1>))>
    )
    ]->
     [
     !VC( userid,
          <
           <(hc(fsys(<data0, data1, n0>))++hc(gsys(<data0, data1, n1>))), 
            signature>, 
           (fsys(<data0, data1, n0>)++gsys(<data0, data1, n1>))>
     )
     ]
    variants (modulo AC)
    1. data0 = data0.18
       data1 = data1.19
       n0    = n0.21
       n1    = n1.22
       pkI   = pkI.23
       signature
             = signature.24
       z     = checksign(signature.24,
                         (hc(fsys(<data0.18, data1.19, n0.21>))++
                          hc(gsys(<data0.18, data1.19, n1.22>))),
                         pkI.23)
    
    2. data0 = data0.23
       data1 = data1.24
       n0    = n0.26
       n1    = n1.27
       pkI   = pk(x.39)
       signature
             = sign((hc(fsys(<data0.23, data1.24, n0.26>))++
                     hc(gsys(<data0.23, data1.24, n1.27>))),
                    x.39)
       z     = true
  */

restriction UniqueVCstore:
  "∀ #i #j userid d1 d2 credential.
    ((SuperAppVC( userid, d1, credential ) @ #i) ∧
     (SuperAppVC( userid, d2, credential ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

rule (modulo E) PresentationRequest[color=#f4c2c2]:
   [
   !MiniProgram( $Verifier, openid, appid ), Fr( ~sess ),
   Fr( ~ShowReq )
   ]
  --[
  Verifier( appid ),
  LVerifierShowPreReq( $Verifier, appid, ~ShowReq )
  ]->
   [
   St_MF_PresentReq( $Verifier, openid, appid ),
   JSAPI_Out( 'RequestVP', appid, 'request_VP' )
   ]

  /* has exactly the trivial AC variant */

restriction UniqueRole:
  "¬(∃ #i #j appid.
      (Issuer( appid ) @ #i) ∧ (Verifier( appid ) @ #j))"
  // safety formula

rule (modulo E) SuperAppConstructVPwithDisclosure[color=#6495ed]:
   [
   JSAPI_In( 'RequestVP', appid, request_VP ),
   !SuperApp( $UserName, $Number, userid ),
   !TEELTK( $Holder, userid, skH ), !MPK( $Verifier, appid, pkV ),
   !VC( userid, <sigJWT, (D++P)> ), Fr( ~envkey )
   ]
  --[
  LHolderPresentVP( userid, appid,
                    <<sigJWT, D>, sign(<sigJWT, D>, skH)>
  ),
  VPrequestFrom( appid ),
  CredentialPresent( $UserName,
                     <senc(<<sigJWT, D>, sign(<sigJWT, D>, skH)>, ~envkey), 
                      aenc(~envkey, pkV)>
  ),
  HolderPresent( userid,
                 <senc(<<sigJWT, D>, sign(<sigJWT, D>, skH)>, ~envkey), 
                  aenc(~envkey, pkV)>
  )
  ]->
   [
   JSAPI_Out( 'PresentVP', appid,
              <$UserName, senc(<<sigJWT, D>, sign(<sigJWT, D>, skH)>, ~envkey), 
               aenc(~envkey, pkV)>
   )
   ]

  /* has exactly the trivial AC variant */

restriction UniqueVPreqfrom:
  "∀ #i #j app.
    ((VPrequestFrom( app ) @ #i) ∧ (VPrequestFrom( app ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction UniqueVP:
  "∀ #i #j userid app VP1 VP2.
    ((LHolderPresentVP( userid, app, VP1 ) @ #i) ∧
     (LHolderPresentVP( userid, app, VP2 ) @ #j)) ⇒
    ((#i = #j) ∧ (VP1 = VP2))"
  // safety formula

rule (modulo E) MBVerifyPresentation[color=#f4c2c2]:
   [
   JSAPI_In( 'PresentVP', appid,
             <UserName, senc(<<<digest, signature>, D>, proof>, envkey), 
              aenc(envkey, pk(skV))>
   ),
   !MLTK( $Verifier, appid, skV ), !MPK( $Issuer, IssueID, pkI ),
   !TEEPK( $Holder, userid, pkH )
   ]
  --[
  Eq( checksign(proof, <<digest, signature>, D>, pkH), true ),
  Eq( checksign(signature, digest, pkI), true ),
  Substring( hc(D), digest ),
  LPresentationVerify( $Verifier, appid, <<digest, signature>, D>,
                       <<<digest, signature>, D>, proof>
  ),
  GetRights( UserName ),
  PassVerify( appid,
              <senc(<<<digest, signature>, D>, proof>, envkey), 
               aenc(envkey, pk(skV))>
  )
  ]->
   [ ]

  /*
  rule (modulo AC) MBVerifyPresentation[color=#f4c2c2]:
     [
     JSAPI_In( 'PresentVP', appid,
               <UserName, senc(<<<digest, signature>, D>, proof>, envkey), 
                aenc(envkey, pk(skV))>
     ),
     !MLTK( $Verifier, appid, skV ), !MPK( $Issuer, IssueID, pkI ),
     !TEEPK( $Holder, userid, pkH )
     ]
    --[
    Eq( z, true ), Eq( z.1, true ), Substring( hc(D), digest ),
    LPresentationVerify( $Verifier, appid, <<digest, signature>, D>,
                         <<<digest, signature>, D>, proof>
    ),
    GetRights( UserName ),
    PassVerify( appid,
                <senc(<<<digest, signature>, D>, proof>, envkey), 
                 aenc(envkey, pk(skV))>
    )
    ]->
     [ ]
    variants (modulo AC)
    1. D     = D.20
       digest
             = digest.24
       pkH   = pkH.26
       pkI   = pkI.27
       proof = proof.28
       signature
             = signature.29
       z     = checksign(proof.28, <<digest.24, signature.29>, D.20>,
                         pkH.26)
       z.1   = checksign(signature.29, digest.24, pkI.27)
    
    2. D     = D.24
       digest
             = digest.28
       pkH   = pkH.30
       pkI   = pk(x.42)
       proof = proof.32
       signature
             = sign(digest.28, x.42)
       z     = checksign(proof.32,
                         <<digest.28, sign(digest.28, x.42)>, D.24>, pkH.30)
       z.1   = true
    
    3. D     = D.27
       digest
             = digest.31
       pkH   = pk(x.48)
       pkI   = pk(x.49)
       proof = sign(<<digest.31, sign(digest.31, x.49)>, D.27>, x.48)
       signature
             = sign(digest.31, x.49)
       z     = true
       z.1   = true
    
    4. D     = D.29
       digest
             = digest.33
       pkH   = pk(x.50)
       pkI   = pkI.36
       proof = sign(<<digest.33, signature.38>, D.29>, x.50)
       signature
             = signature.38
       z     = true
       z.1   = checksign(signature.38, digest.33, pkI.36)
  */

lemma SourcesID [sources]:
  all-traces
  "∀ appid #i.
    (MustIssuer( appid ) @ #i) ⇒
    ((∃ #h. (!KU( appid ) @ #h) ∧ (#h < #i)) ∨
     (∃ #h. Issuer( appid ) @ #h))"
/*
guarded formula characterizing all counter-examples:
"∃ appid #i.
  (MustIssuer( appid ) @ #i)
 ∧
  (∀ #h. (!KU( appid ) @ #h) ⇒ ¬(#h < #i)) ∧
  (∀ #h. (Issuer( appid ) @ #h) ⇒ ⊥)"
*/
by sorry

restriction SingleIssuerVerifier:
  "(∀ appid1 appid2 #i #j.
     ((Issuer( appid1 ) @ #i) ∧ (Issuer( appid2 ) @ #j)) ⇒ (#i = #j)) ∧
   (∀ appid #i #j.
     ((Verifier( appid ) @ #i) ∧ (Verifier( appid ) @ #j)) ⇒ (#i = #j))"
  // safety formula

lemma UniquePass [heuristic={UniquePass}]:
  all-traces
  "∀ VP appid #i.
    (PassVerify( appid, VP ) @ #i) ⇒
    (((∃ userid #j.
        ((HolderPresent( userid, VP ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ verifier #k.
            (PassVerify( verifier, VP ) @ #k) ∧ (¬(#k = #i))))) ∨
      (∃ userid #i.1. CompromiseTEE( userid ) @ #i.1)) ∨
     (∃ appid.1 ltk #i.1. Reaveal( appid.1, ltk ) @ #i.1))"
/*
guarded formula characterizing all counter-examples:
"∃ VP appid #i.
  (PassVerify( appid, VP ) @ #i)
 ∧
  (∀ userid #j.
    (HolderPresent( userid, VP ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ verifier #k. (PassVerify( verifier, VP ) @ #k) ∧ ¬(#k = #i)))) ∧
  (∀ userid #i.1. (CompromiseTEE( userid ) @ #i.1) ⇒ ⊥) ∧
  (∀ appid.1 ltk #i.1. (Reaveal( appid.1, ltk ) @ #i.1) ⇒ ⊥)"
*/
simplify
solve( !MLTK( $Verifier, appid, skV ) ▶₁ #i )
  case MiniprogramRegister
  solve( JSAPI_In( 'PresentVP', ~appid,
                   <UserName, 
                    senc(<<<digest, sign(digest, x)>, D>, 
                          sign(<<digest, sign(digest, x)>, D>, x.1)>,
                         envkey), 
                    aenc(envkey, pk(~k))>
         ) ▶₀ #i )
    case JSAPIIn
    solve( !MPK( $Issuer, IssueID, pk(x) ) ▶₂ #i )
      case MiniprogramRegister
      solve( !TEEPK( $Holder, userid, pk(x) ) ▶₃ #i )
        case SuperAppSetUp
        solve( !JSAPI( 'PresentVP', ~appid,
                       <UserName, 
                        senc(<<<digest, sign(digest, ~k)>, D>, 
                              sign(<<digest, sign(digest, ~k)>, D>, ~k.1)>,
                             envkey), 
                        aenc(envkey, pk(~k.2))>
               ) ▶₀ #vr.3 )
          case AdversaryJSAPI_out
          solve( !KU( aenc(envkey, pk(~k.2)) ) @ #vk.6 )
            case Z_JSAPICompromised_case_01
            solve( TLSServer_In( 'GET', ~sess.1, $Issuer.2,
                                 <'accessInfoReq', ~appid.3, ~token.1>
                   ) ▶₀ #vr.28 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'POST', ~sess.1, $Issuer.2,
                                   <'token_req', ~appid.3, ~authCode.1>
                     ) ▶₀ #vr.31 )
                case TLSClientToServer_case_1
                solve( TLSServer_In( 'GET', ~sess.1, $Issuer.2,
                                     <'userInfo', ~appid.3, 'req'>
                       ) ▶₀ #vr.33 )
                  case TLSClientToServer_case_1
                  solve( !KU( senc(<<<digest, sign(digest, ~k)>, D>, 
                                    sign(<<digest, sign(digest, ~k)>, D>, ~k.1)>,
                                   ~envkey)
                         ) @ #vk.6 )
                    case Z_JSAPICompromised
                    solve( (#k.5 < #i)  ∥ (#i < #k.5) )
                      case case_1
                      solve( !MLTK( $Verifier.1, verifier, ~k.2 ) ▶₁ #k.4 )
                        case MiniprogramRegister
                        solve( JSAPI_In( 'PresentVP', ~appid,
                                         <UserName.2, 
                                          senc(<
                                                <
                                                 <
                                                  (hc(fsys(<~data0, ~data1, ~n0>))++
                                                   hc(gsys(<~data0, ~data1, ~n1>))), 
                                                  sign((hc(fsys(<~data0, ~data1, ~n0>))++
                                                        hc(gsys(<~data0, ~data1, ~n1>))),
                                                       ~k)
                                                 >, 
                                                 fsys(<~data0, ~data1, ~n0>)>, 
                                                sign(<
                                                      <
                                                       (hc(fsys(<~data0, ~data1, ~n0>))++
                                                        hc(gsys(<~data0, ~data1, ~n1>))), 
                                                       sign((hc(fsys(<~data0, ~data1, ~n0>))++
                                                             hc(gsys(<~data0, ~data1, ~n1>))),
                                                            ~k)
                                                      >, 
                                                      fsys(<~data0, ~data1, ~n0>)>,
                                                     ~k.1)
                                               >,
                                               ~envkey), 
                                          aenc(~envkey, pk(~k.2))>
                               ) ▶₀ #k.4 )
                          case JSAPIIn
                          solve( !MPK( $Issuer.1, IssueID, pk(~k) ) ▶₂ #k.4 )
                            case MiniprogramRegister
                            solve( !TEEPK( $Holder.1, userid.1, pk(~k.1) ) ▶₃ #k.4 )
                              case SuperAppSetUp
                              solve( !JSAPI( 'RequestVP', ~appid, request_VP ) ▶₀ #vr.13 )
                                case AdversaryJSAPI_out
                                solve( !KU( ~appid ) @ #vk.5 )
                                  case RevealMiniProgramPrivKey
                                  by contradiction /* from formulas */
                                next
                                  case TLSClientToAdversaryServer_case_1
                                  solve( !JSAPI( 'importVC', ~appid.1,
                                                 <
                                                  senc(<
                                                        (hc(fsys(<~data0, ~data1, ~n0>))++
                                                         hc(gsys(<~data0, ~data1, ~n1>))), 
                                                        sign((hc(fsys(<~data0, ~data1, ~n0>))++
                                                              hc(gsys(<~data0, ~data1, ~n1>))),
                                                             ~k)
                                                       >,
                                                       envkey.1), 
                                                  aenc(envkey.1, pk(~k.1))>
                                         ) ▶₀ #vr.15 )
                                    case AdversaryJSAPI_out
                                    solve( !KU( senc(<
                                                      (hc(fsys(<~data0, ~data1, ~n0>))++
                                                       hc(gsys(<~data0, ~data1, ~n1>))), 
                                                      sign((hc(fsys(<~data0, ~data1, ~n0>))++
                                                            hc(gsys(<~data0, ~data1, ~n1>))),
                                                           ~k)
                                                     >,
                                                     envkey.1)
                                           ) @ #vk.12 )
                                      case Z_JSAPICompromised
                                      solve( !JSAPI( 'PresentVP', ~appid,
                                                     <UserName.2, 
                                                      senc(<
                                                            <
                                                             <
                                                              (hc(fsys(<~data0, ~data1, ~n0>))++
                                                               hc(gsys(<~data0, ~data1, ~n1>))), 
                                                              sign((
                                                                    hc(fsys(<~data0, ~data1, ~n0
                                                                            >))++
                                                                    hc(gsys(<~data0, ~data1, ~n1>))
                                                                   ),
                                                                   ~k)
                                                             >, 
                                                             fsys(<~data0, ~data1, ~n0>)>, 
                                                            sign(<
                                                                  <
                                                                   (
                                                                    hc(fsys(<~data0, ~data1, ~n0
                                                                            >))++
                                                                    hc(gsys(<~data0, ~data1, ~n1>))
                                                                   ), 
                                                                   sign((
                                                                         hc(fsys(<~data0, ~data1, 
                                                                                  ~n0>))++
                                                                         hc(gsys(<~data0, ~data1, 
                                                                                  ~n1>))
                                                                        ),
                                                                        ~k)
                                                                  >, 
                                                                  fsys(<~data0, ~data1, ~n0>)>,
                                                                 ~k.1)
                                                           >,
                                                           ~envkey), 
                                                      aenc(~envkey, pk(~k))>
                                             ) ▶₀ #vr.42 )
                                        case AdversaryJSAPI_out
                                        solve( !KU( aenc(~envkey.1, pk(~k.1)) ) @ #vk.13 )
                                          case Z_JSAPICompromised
                                          SOLVED // trace found
                                        next
                                          case c_aenc
                                          by sorry
                                        qed
                                      next
                                        case JSAPIOut
                                        by sorry
                                      qed
                                    next
                                      case c_senc
                                      by sorry
                                    qed
                                  next
                                    case JSAPIOut
                                    by sorry
                                  qed
                                next
                                  case TLSClientToAdversaryServer_case_2
                                  by sorry
                                next
                                  case TLSClientToAdversaryServer_case_3
                                  by sorry
                                next
                                  case TLSServerToAdversaryClient_case_1
                                  by sorry
                                next
                                  case TLSServerToAdversaryClient_case_2
                                  by sorry
                                next
                                  case Z_JSAPICompromised_case_1
                                  by sorry
                                next
                                  case Z_JSAPICompromised_case_2
                                  by sorry
                                next
                                  case Z_JSAPICompromised_case_3
                                  by contradiction /* cyclic */
                                qed
                              next
                                case JSAPIOut
                                by sorry
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      by sorry
                    qed
                  next
                    case c_senc
                    by sorry
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                by sorry
              qed
            next
              case TLSClientToServer_case_2
              by sorry
            qed
          next
            case Z_JSAPICompromised_case_02
            by sorry
          next
            case Z_JSAPICompromised_case_03
            by sorry
          next
            case Z_JSAPICompromised_case_04
            by sorry
          next
            case Z_JSAPICompromised_case_05
            by sorry
          next
            case Z_JSAPICompromised_case_06
            by sorry
          next
            case Z_JSAPICompromised_case_07
            by sorry
          next
            case Z_JSAPICompromised_case_08
            by sorry
          next
            case Z_JSAPICompromised_case_09
            by sorry
          next
            case Z_JSAPICompromised_case_10
            by sorry
          next
            case Z_JSAPICompromised_case_11
            by sorry
          next
            case Z_JSAPICompromised_case_12
            by sorry
          next
            case Z_JSAPICompromised_case_13
            by sorry
          next
            case Z_JSAPICompromised_case_14
            by sorry
          next
            case Z_JSAPICompromised_case_15
            by sorry
          next
            case Z_JSAPICompromised_case_16
            by sorry
          next
            case c_aenc
            by sorry
          qed
        next
          case JSAPIOut_case_01
          by sorry
        next
          case JSAPIOut_case_02
          by sorry
        next
          case JSAPIOut_case_03
          by sorry
        next
          case JSAPIOut_case_04
          by sorry
        next
          case JSAPIOut_case_05
          by sorry
        next
          case JSAPIOut_case_06
          by sorry
        next
          case JSAPIOut_case_07
          by sorry
        next
          case JSAPIOut_case_08
          by sorry
        next
          case JSAPIOut_case_09
          by sorry
        next
          case JSAPIOut_case_10
          by sorry
        next
          case JSAPIOut_case_11
          by sorry
        next
          case JSAPIOut_case_12
          by sorry
        next
          case JSAPIOut_case_13
          by sorry
        next
          case JSAPIOut_case_14
          by sorry
        next
          case JSAPIOut_case_15
          by sorry
        next
          case JSAPIOut_case_16
          by sorry
        qed
      qed
    qed
  qed
qed





























/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.8.0
Maude version 2.7.1
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2023-08-30 13:15:41.590881948 UTC
*/

end