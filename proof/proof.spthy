theory DID_ begin

// Function signature and definition of the equational theory E

builtins: multiset, natural-numbers
functions: adec/2, aenc/2, checksign/3, fst/1, hash/1, maskedID/2,
           pair/2, pk/1, sdec/2, senc/2, sign/2, snd/1, true/0
equations:
    adec(aenc(x, pk(k)), k) = x,
    checksign(sign(m, k), m, pk(k)) = true,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x, k), k) = x,
    snd(<x.1, x.2>) = x.2

tactic: exec
presort: s
prio: {id}
  regex".*St_MF_PresentReq.*\(.*"
prio: {id}
  regex".*TEELTK\(.*"
prio: {id}
  regex".*MPK\(.*"
prio: {id}
  regex".*VC\(.*"
prio: {id}
  regex".*TLS.*_In\(.*"
prio: {id}
  regex".*St_MFAuthCode.*\(.*"
prio: {id}
  regex".*MF\(.*"
prio: {id}
  regex".*St_\(.*"
prio: {id}
  regex".*SuperAppClient\(.*"
deprio: {id}
  regex".*⊏.*\+x.*"
deprio: {id}
  regex".*⊏.*"


tactic: secrecy
presort: s
prio: {id}
  regex".*St_MF_PresentReq.*\(.*"
prio: {id}
  regex".*TEELTK\(.*"
prio: {id}
  regex".*MPK\(.*"
prio: {id}
  regex".*VC\(.*"
prio: {id}
  regex".*St_MFAuthCode.*\(.*"
prio: {id}
  regex".*MF\(.*"
prio: {id}
  regex".*St_\(.*"
prio: {id}
  regex".*SuperAppClient\(.*"
deprio: {id}
  regex".*TLS.*_In"
deprio: {id}
  regex".*⊏.*\+x.*"
deprio: {id}
  regex".*⊏.*"


tactic: executability
presort: s
prio: {id}
  regex".*MF\(.*"
prio: {id}
  regex".*St_\(.*"
prio: {id}
  regex".*TLSServer_In\(.*"
prio: {id}
  regex".*TLSClient_In\(.*"
prio: {id}
  regex".*MB\(.*"
deprio: {id}
  regex".*⊏.*\+x.*"
deprio: {id}
  regex".*⊏.*"
deprio: {id}
  regex".*SuperAppClient\(.*"
deprio: {id}
  regex".*SuperAppServer\(.*"


tactic: integrityOfVC
presort: s
prio: {id}
  regex".*!SuperApp\(.*"
prio: {id}
  regex".*MPK\(.*"
prio: {id}
  regex".*TEELTK\(.*"
prio: {id}
  regex".*DB\(.*"
prio: {id}
  regex".*JSAPI_In\(.*"


tactic: secrecyOfCredential
presort: s
prio: {id}
  regex".*!SuperApp\(.*"
prio: {id}
  regex".*MPK\(.*"
prio: {id}
  regex".*TEELTK\(.*"
prio: {id}
  regex".*DB\(.*"
prio: {id}
  regex".*St_\(.*"
prio: {id}
  regex".*TLS.*_In\(.*"
prio: {id}
  regex".*!JSAPI\(.*"
prio: {id}
  regex".*JSAPI_In\(.*"
prio: {id}
  regex"∃.*"
prio: {id}
  regex"!KU\(sign\(.*"
prio: {id}
  regex"!KU\(~envelope_key.*"
prio: {id}
  regex"!KU\(~k.*"


tactic: CodeSecrecy
presort: s
prio: {id}
  regex"!KU\(~authCode.*"



heuristic: o "oracleDID"





restriction equal:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction Substring:
  "∀ a b #i. (Substring( a, b ) @ #i) ⇒ (a ⊏ b)"
  // safety formula

rule (modulo E) Domain:
   [ ] --> [ !Domain( $Domain ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DomainCompromise:
   [ !Domain( $Domain ) ]
  --[ CompromisedDomain( $Domain ), AdversaryActivity( ) ]->
   [ !DomainCompromise( $Domain ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSClientOut[color=#ffffff]:
   [ TLSClient_Out( method, ~sess, $Domain, msg ), !Domain( $Domain )
   ]
  -->
   [ !TLSClient( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSAdversaryClientOut[color=#ff6961]:
   [ In( method ), In( ~sess ), In( msg ), !Domain( $Domain ) ]
  --[ AdversaryActivity( ) ]->
   [ !TLSClient( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSServerOut[color=#ffffff]:
   [ TLSServer_Out( method, ~sess, $Domain, msg ), !Domain( $Domain )
   ]
  -->
   [ !TLSServer( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSAdversaryServerOut[color=#ff6961]:
   [
   In( method ), In( ~sess ), In( msg ), !DomainCompromise( $Domain )
   ]
  --[ AdversaryActivity( ) ]->
   [ !TLSServer( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSClientToServer[color=#ffffff]:
   [ !TLSClient( method, ~sess, $Domain, msg ) ]
  --[ TLSClientToServer( msg ) ]->
   [ TLSServer_In( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSClientToAdversaryServer[color=#ff6961]:
   [
   !TLSClient( method, ~sess, $Domain, msg ),
   !DomainCompromise( $Domain )
   ]
  --[ AdversaryActivity( ) ]->
   [ Out( msg ), Out( ~sess ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSServerToClient[color=#ffffff]:
   [ !TLSServer( method, ~sess, $Domain, msg ) ]
  --[ TLSServerToClient( msg ) ]->
   [ TLSClient_In( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSServerToAdversaryClient[color=#ff6961]:
   [
   In( ~adversarySess ),
   !TLSServer( method, ~adversarySess, $Domain, msg )
   ]
  --[ AdversaryActivity( ) ]->
   [ Out( msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Phone[color=#004225]:
   [ ]
  --[ ClaimNumber( $A, $Number ), IsPhoneNumber( $Number ) ]->
   [ !Phone( $A, $Number ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) InstallSuperAppClient[color=#a3c1ad]:
   [
   !Phone( $UserName, $Number ), Fr( ~userid ), Fr( ~sensitiveData ),
   Fr( ~disclosure ), Fr( ~k )
   ]
  --[
  InstallSuperApp( $UserName, $Number, ~userid ),
  DataBase( ~userid, ~disclosure, ~sensitiveData )
  ]->
   [
   !SuperApp( $UserName, $Number, ~userid ),
   !Server( $UserName, $Number, ~userid ),
   !DB( ~userid, ~disclosure, ~sensitiveData )
   ]

  /* has exactly the trivial AC variant */

restriction uniqueUserAccount:
  "∀ name1 name2 number1 number2 userid1 userid2 #i #j.
    ((InstallSuperApp( name1, number1, userid1 ) @ #i) ∧
     (InstallSuperApp( name2, number2, userid2 ) @ #j)) ⇒
    ((((#i = #j) ∧ (name1 = name2)) ∧ (number1 = number2)) ∧
     (userid1 = userid2))"
  // safety formula

rule (modulo E) SuperAppSetUp:
   [ !SuperApp( $userName, $Number, userid ), Fr( ~k ) ]
  --[
  SetupKey( userid, ~k ),
  RegisterDIDdocument( $Holder, $context, pk(~k) )
  ]->
   [
   !TEELTK( $Holder, userid, ~k ), !TEEPK( $Holder, userid, pk(~k) ),
   !DID( <'context', $context>, <'id', $Holder>, <'auth', pk(~k)> ),
   Out( pk(~k) )
   ]

  /* has exactly the trivial AC variant */

restriction uniquClientKey:
  "∀ userid k1 k2 #i #j.
    ((SetupKey( userid, k1 ) @ #i) ∧ (SetupKey( userid, k2 ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

rule (modulo E) RevealSuperAppKey[color=#e52b50]:
   [ !TEELTK( $Holder, userid, k ) ]
  --[ CompromiseTEE( userid ), AdversaryActivity( ) ]->
   [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LeakSenstiveData[color=#e52b50]:
   [ !DB( userid, disclosure, sensitiveData ) ]
  --[
  LeakData( userid, sensitiveData ), LeakData( userid, disclosure ),
  AdversaryActivity( )
  ]->
   [ Out( disclosure ), Out( sensitiveData ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MiniprogramRegister[color=#fff8e7]:
   [
   Fr( ~appid ), Fr( ~openid ), Fr( ~k ),
   !SuperApp( $UserName, $Number, ~userid )
   ]
  --[ MiniprogramRegister( $A, ~userid, ~appid ) ]->
   [
   !MiniProgram( $A, ~openid, ~appid ), !MLTK( $A, ~appid, ~k ),
   !MPK( $A, ~appid, pk(~k) ), Out( pk(~k) ),
   !DID( <'context', $context>, <'id', $A>, <'auth', pk(~k)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) RevealMiniProgramPrivKey[color=#e52b50]:
   [ !MLTK( $A, appid, ltk ) ]
  --[ Reaveal( appid, ltk ), AdversaryActivity( ) ]->
   [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) AuthCodeRequest[color=#fdd5b1]:
   [
   !MiniProgram( $Issuer, openid, appid ),
   !SuperApp( $UserName, $Number, ~userid ), Fr( ~sess )
   ]
  --[ Issuer( appid ), LIssurerAuthCodeRequest( $Issuer, appid ) ]->
   [
   St_MP_AuthCodeReq( $Issuer, ~sess, openid, appid ),
   TLSClient_Out( 'GET', ~sess, $Issuer, <'userInfo', appid, 'req'> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SuperAppGenerateAuthCode[color=#6495ed]:
   [
   TLSServer_In( 'GET', ~sess, $Issuer, <'userInfo', appid, 'req'> ),
   !SuperApp( $UserName, $Number, userid ), Fr( ~authCode ),
   In( %lifeTime )
   ]
  --[
  LAuthCodeGenerate( userid, %lifeTime, ~authCode ),
  IsSession( ~sess ), InitSession( ~sess ), MustIssuer( appid )
  ]->
   [
   TLSServer_Out( 'GET', ~sess, $Issuer,
                  <'authCode', appid, ~authCode>
   ),
   St_SA_IssueCode( $UserName, $Issuer, appid, ~authCode ),
   AuthCode( ~authCode )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

restriction legalInitalReq:
  "¬(∃ sess #i #j. (InitSession( sess ) @ #i) ∧ (!KU( sess ) @ #j))"
  // safety formula

rule (modulo E) MPgetAuthCode[color=#fdd5b1]:
   [
   St_MP_AuthCodeReq( $Issuer, sess, openid, appid ),
   TLSClient_In( 'GET', sess, $Issuer, <'authCode', appid, authCode>
   ),
   Fr( ~sessPost )
   ]
  --[
  LMFGetAuthCode( $Issure, appid, authCode ),
  StartSession( ~sessPost )
  ]->
   [
   St_MP_TokenReq( $Issuer, openid, appid, authCode ),
   TLSClient_Out( 'POST', ~sessPost, $Issuer,
                  <'token_req', appid, authCode>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SuperAppGenerateToken[color=#6495ed]:
   [
   TLSServer_In( 'POST', ~sess, $Issuer,
                 <'token_req', appid, authCode>
   ),
   St_SA_IssueCode( $UserName, $Issuer, appid, authCode ),
   !SuperApp( $UserName, $Number, userid ), Fr( ~token )
   ]
  --[ IsSession( ~sess ), UseCode( $Issuer, authCode ) ]->
   [
   TLSServer_Out( 'POST', ~sess, $Issuer,
                  <'token_consume', appid, ~token>
   ),
   St_SA_DistributeToken( $UserName, $Issuer, appid, ~token ),
   Token( ~token )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) MBCallInfoShareAPI[color=#fdfd96]:
   [
   St_MP_TokenReq( $Issuer, openid, appid, authCode ),
   TLSClient_In( 'POST', ~sess, $Issuer,
                 <'token_consume', appid, token>
   ),
   Fr( ~sessCall )
   ]
  --[ IsSession( ~sess ), StartSession( ~sessCall ) ]->
   [
   St_MB_CallInfoShare( $Issuer, openid, appid, token ),
   TLSClient_Out( 'GET', ~sessCall, $Issuer,
                  <'accessInfoReq', appid, token>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SuperAppReturnValue[color=#6495ed]:
   [
   TLSServer_In( 'GET', ~sess, $Issuer,
                 <'accessInfoReq', appid, token>
   ),
   St_SA_DistributeToken( $UserName, $Issuer, appid, token ),
   !DB( userid, disclosure, sensitiveData )
   ]
  --[ IsSession( ~sess ) ]->
   [
   TLSServer_Out( 'GET', ~sess, $Issuer,
                  <'accessInfo', appid, disclosure, sensitiveData>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) MBgetSentitiveData[color=#fdfd96]:
   [
   St_MB_CallInfoShare( $Issuer, openid, appid, token ),
   TLSClient_In( 'GET', ~sess, $Issuer,
                 <'accessInfo', appid, disclosure, sensitiveData>
   )
   ]
  --[
  LMBGetSensitiveData( appid, <disclosure, sensitiveData> ),
  IsSession( ~sess )
  ]->
   [ !MBDB( $Issuer, openid, appid, <disclosure, sensitiveData> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MBConstructCredential[color=#fdfd96]:
   [
   !MBDB( $Issuer, openid, appid, <disclosure, sensitiveData> ),
   !MLTK( $Issuer, appid, PrivKey ),
   !TEEPK( $Holder, userid, pubKey ), Fr( ~envelope_key ), Fr( ~sess )
   ]
  --[
  LCredentialIssurance( $Issuer, appid,
                        <
                         senc(<(hash(disclosure)++hash(sensitiveData)), 
                               sign((hash(disclosure)++hash(sensitiveData)), PrivKey)>,
                              ~envelope_key), 
                         aenc(~envelope_key, pubKey)>
  ),
  IssueVC( appid,
           <
            <(hash(disclosure)++hash(sensitiveData)), 
             sign((hash(disclosure)++hash(sensitiveData)), PrivKey)>, 
            (disclosure++sensitiveData)>
  ),
  StartSession( ~sess )
  ]->
   [
   JSAPI_Out( 'importVC', appid,
              <
               senc(<(hash(disclosure)++hash(sensitiveData)), 
                     sign((hash(disclosure)++hash(sensitiveData)), PrivKey)>,
                    ~envelope_key), 
               aenc(~envelope_key, pubKey)>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) JSAPIOut[color=#ffffff]:
   [ JSAPI_Out( NameAPI, id, msg ) ]
  -->
   [ !JSAPI( NameAPI, id, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Z_JSAPICompromised[color=#ff6961]:
   [ !JSAPI( NameAPI, id, msg ) ]
  --[ MaliciousProgram( NameAPI, id ) ]->
   [ Out( msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) JSAPIIn[color=#ffffff]:
   [ !JSAPI( NameAPI, id, msg ) ]
  --[ JSAPIgenerate( msg ) ]->
   [ JSAPI_In( NameAPI, id, msg ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) SuperAppStoreVC[color=#6495ed]:
   [
   JSAPI_In( 'importVC', appid,
             <
              senc(<(hash(disclosure)++hash(sensitiveData)), signature>,
                   envelope_key), 
              aenc(envelope_key, pk(skH))>
   ),
   !SuperApp( $UserName, $Number, userid ),
   !MPK( $Issuer, appid, pkI ), !TEELTK( $Holder, userid, skH ),
   !DB( userid, disclosure, sensitiveData )
   ]
  --[
  Eq( checksign(signature, (hash(disclosure)++hash(sensitiveData)),
                pkI),
      true
  ),
  LSuperAppStoreVC( userid,
                    <
                     senc(<(hash(disclosure)++hash(sensitiveData)), signature>,
                          envelope_key), 
                     aenc(envelope_key, pk(skH))>,
                    <<(hash(disclosure)++hash(sensitiveData)), signature>, 
                     (disclosure++sensitiveData)>
  ),
  SuperAppVC( userid,
              <
               senc(<(hash(disclosure)++hash(sensitiveData)), signature>,
                    envelope_key), 
               aenc(envelope_key, pk(skH))>,
              <<(hash(disclosure)++hash(sensitiveData)), signature>, 
               (disclosure++sensitiveData)>
  )
  ]->
   [
   !VC( userid,
        <<(hash(disclosure)++hash(sensitiveData)), signature>, 
         (disclosure++sensitiveData)>
   )
   ]

  /*
  rule (modulo AC) SuperAppStoreVC[color=#6495ed]:
     [
     JSAPI_In( 'importVC', appid,
               <
                senc(<(hash(disclosure)++hash(sensitiveData)), signature>,
                     envelope_key), 
                aenc(envelope_key, pk(skH))>
     ),
     !SuperApp( $UserName, $Number, userid ),
     !MPK( $Issuer, appid, pkI ), !TEELTK( $Holder, userid, skH ),
     !DB( userid, disclosure, sensitiveData )
     ]
    --[
    Eq( z, true ),
    LSuperAppStoreVC( userid,
                      <
                       senc(<(hash(disclosure)++hash(sensitiveData)), signature>,
                            envelope_key), 
                       aenc(envelope_key, pk(skH))>,
                      <<(hash(disclosure)++hash(sensitiveData)), signature>, 
                       (disclosure++sensitiveData)>
    ),
    SuperAppVC( userid,
                <
                 senc(<(hash(disclosure)++hash(sensitiveData)), signature>,
                      envelope_key), 
                 aenc(envelope_key, pk(skH))>,
                <<(hash(disclosure)++hash(sensitiveData)), signature>, 
                 (disclosure++sensitiveData)>
    )
    ]->
     [
     !VC( userid,
          <<(hash(disclosure)++hash(sensitiveData)), signature>, 
           (disclosure++sensitiveData)>
     )
     ]
    variants (modulo AC)
    1. disclosure
             = disclosure.16
       pkI   = pkI.18
       sensitiveData
             = sensitiveData.19
       signature
             = signature.20
       z     = checksign(signature.20,
                         (hash(disclosure.16)++hash(sensitiveData.19)), pkI.18)
    
    2. disclosure
             = disclosure.19
       pkI   = pk(x.30)
       sensitiveData
             = sensitiveData.22
       signature
             = sign((hash(disclosure.19)++hash(sensitiveData.22)), x.30)
       z     = true
  */

rule (modulo E) PresentationRequest[color=#f4c2c2]:
   [
   !MiniProgram( $Verifier, openid, appid ), Fr( ~sess ),
   Fr( ~ShowReq )
   ]
  --[
  Verifier( appid ),
  LVerifierShowPreReq( $Verifier, appid, ~ShowReq )
  ]->
   [
   St_MF_PresentReq( $Verifier, openid, appid ),
   JSAPI_Out( 'RequestVP', appid, 'request_VP' )
   ]

  /* has exactly the trivial AC variant */

restriction UniqueRole:
  "¬(∃ #i #j appid.
      (Issuer( appid ) @ #i) ∧ (Verifier( appid ) @ #j))"
  // safety formula

rule (modulo E) SuperAppConstructVPwithDisclosure[color=#6495ed]:
   [
   JSAPI_In( 'RequestVP', appid, request_VP ),
   !SuperApp( $UserName, $Number, userid ),
   !TEELTK( $Holder, userid, skH ), !MPK( $Verifier, appid, pkV ),
   !VC( userid, <Issuer_signed_JWT, (disclosure++sensitiveData)> ),
   Fr( ~envelope_key )
   ]
  --[
  LHolderPresentVP( userid, appid,
                    <<Issuer_signed_JWT, disclosure>, 
                     sign(<Issuer_signed_JWT, disclosure>, skH)>
  ),
  Pair( <Issuer_signed_JWT, (disclosure++sensitiveData)>,
        <Issuer_signed_JWT, disclosure>
  )
  ]->
   [
   JSAPI_Out( 'PresentVP', appid,
              <
               senc(<<Issuer_signed_JWT, disclosure>, 
                     sign(<Issuer_signed_JWT, disclosure>, skH)>,
                    ~envelope_key), 
               aenc(~envelope_key, pkV)>
   )
   ]

  /* has exactly the trivial AC variant */

lemma subset:
  exists-trace
  "∃ #i credential payload.
    (Pair( credential, payload ) @ #i) ∧ (payload = credential)"
/*
guarded formula characterizing all satisfying traces:
"∃ #i credential payload.
  (Pair( credential, payload ) @ #i) ∧ (payload = credential)"
*/
by sorry

restriction replayReq:
  "∀ userid appid VP1 VP2 #i #j.
    ((LHolderPresentVP( userid, appid, VP1 ) @ #i) ∧
     (LHolderPresentVP( userid, appid, VP2 ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

rule (modulo E) MBVerifyPresentation[color=#f4c2c2]:
   [
   St_MF_PresentReq( $Verifier, openid, appid ),
   JSAPI_Out( 'PresentVP', appid,
              <senc(<<<digest, signature>, disclosure>, proof>, envelope_key), 
               aenc(envelope_key, pk(skV))>
   ),
   !MLTK( $Verifier, appid, skV ), !MPK( $Issuer, IssueID, pkI ),
   !TEEPK( $Holder, userid, pkH )
   ]
  --[
  Eq( checksign(proof, <<digest, signature>, disclosure>, pkH), true
  ),
  Eq( checksign(signature, digest, pkI), true ),
  Substring( hash(disclosure), digest ),
  LPresentationVerify( $Verifier, appid,
                       <<digest, signature>, disclosure>,
                       <<<digest, signature>, disclosure>, proof>
  )
  ]->
   [ ]

  /*
  rule (modulo AC) MBVerifyPresentation[color=#f4c2c2]:
     [
     St_MF_PresentReq( $Verifier, openid, appid ),
     JSAPI_Out( 'PresentVP', appid,
                <senc(<<<digest, signature>, disclosure>, proof>, envelope_key), 
                 aenc(envelope_key, pk(skV))>
     ),
     !MLTK( $Verifier, appid, skV ), !MPK( $Issuer, IssueID, pkI ),
     !TEEPK( $Holder, userid, pkH )
     ]
    --[
    Eq( z, true ), Eq( z.1, true ),
    Substring( hash(disclosure), digest ),
    LPresentationVerify( $Verifier, appid,
                         <<digest, signature>, disclosure>,
                         <<<digest, signature>, disclosure>, proof>
    )
    ]->
     [ ]
    variants (modulo AC)
    1. digest
             = digest.20
       disclosure
             = disclosure.21
       pkH   = pkH.24
       pkI   = pkI.25
       proof = proof.26
       signature
             = signature.27
       z     = checksign(proof.26,
                         <<digest.20, signature.27>, disclosure.21>, pkH.24)
       z.1   = checksign(signature.27, digest.20, pkI.25)
    
    2. digest
             = digest.25
       disclosure
             = disclosure.26
       pkH   = pk(x.42)
       pkI   = pk(x.43)
       proof = sign(<<digest.25, sign(digest.25, x.43)>, disclosure.26>,
                    x.42)
       signature
             = sign(digest.25, x.43)
       z     = true
       z.1   = true
    
    3. digest
             = digest.26
       disclosure
             = disclosure.27
       pkH   = pkH.30
       pkI   = pk(x.44)
       proof = proof.32
       signature
             = sign(digest.26, x.44)
       z     = checksign(proof.32,
                         <<digest.26, sign(digest.26, x.44)>, disclosure.27>, pkH.30)
       z.1   = true
    
    4. digest
             = digest.27
       disclosure
             = disclosure.28
       pkH   = pk(x.44)
       pkI   = pkI.32
       proof = sign(<<digest.27, signature.34>, disclosure.28>, x.44)
       signature
             = signature.34
       z     = true
       z.1   = checksign(signature.34, digest.27, pkI.32)
  */

lemma SourcesID [sources]:
  all-traces
  "∀ appid #i.
    (MustIssuer( appid ) @ #i) ⇒
    ((∃ #h. (!KU( appid ) @ #h) ∧ (#h < #i)) ∨
     (∃ #h. Issuer( appid ) @ #h))"
/*
guarded formula characterizing all counter-examples:
"∃ appid #i.
  (MustIssuer( appid ) @ #i)
 ∧
  (∀ #h. (!KU( appid ) @ #h) ⇒ ¬(#h < #i)) ∧
  (∀ #h. (Issuer( appid ) @ #h) ⇒ ⊥)"
*/
by sorry

restriction SingleIssuerVerifier:
  "(∀ appid1 appid2 #i #j.
     ((Issuer( appid1 ) @ #i) ∧ (Issuer( appid2 ) @ #j)) ⇒ (#i = #j)) ∧
   (∀ appid1 appid2 #i #j.
     ((Verifier( appid1 ) @ #i) ∧ (Verifier( appid2 ) @ #j)) ⇒
     (#i = #j))"
  // safety formula

restriction AuthCodeReqOnce:
  "∀ Issuer appid #i #j.
    ((LIssurerAuthCodeRequest( Issuer, appid ) @ #i) ∧
     (LIssurerAuthCodeRequest( Issuer, appid ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction OnceConstructionVC:
  "∀ Issuer appid VC1 VC2 #i #j.
    ((LCredentialIssurance( Issuer, appid, VC1 ) @ #i) ∧
     (LCredentialIssurance( Issuer, appid, VC2 ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction OncePresentationReq:
  "∀ V1 V2 appid1 appid2 req1 req2 #i #j.
    ((LVerifierShowPreReq( V1, appid1, req1 ) @ #i) ∧
     (LVerifierShowPreReq( V2, appid2, req2 ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

lemma Executability:
  exists-trace
  "∃ Issuer appidI #t0 userid lifeTime authCode #t1 VCdata credential
     Verifier appidV payload ShowReq VP #t2 #t5 #tx #tz #t6 #t7 #t8.
    ((((((((((LIssurerAuthCodeRequest( Issuer, appidI ) @ #t0) ∧
             (LAuthCodeGenerate( userid, lifeTime, authCode ) @ #t1)) ∧
            (LMFGetAuthCode( Issuer, appidI, authCode ) @ #t2)) ∧
           (LCredentialIssurance( Issuer, appidI, VCdata ) @ #tx)) ∧
          (JSAPIgenerate( VCdata ) @ #tz)) ∧
         (LSuperAppStoreVC( userid, VCdata, credential ) @ #t5)) ∧
        (LVerifierShowPreReq( Verifier, appidV, ShowReq ) @ #t6)) ∧
       (LHolderPresentVP( userid, appidV, VP ) @ #t7)) ∧
      (LPresentationVerify( Verifier, appidV, payload, VP ) @ #t8)) ∧
     (¬(∃ #x. AdversaryActivity( ) @ #x))) ∧
    (Ex pre D d. credential = <pre, D> & payload = <pre, d> & d << D)"
/*
guarded formula characterizing all satisfying traces:
"∃ Issuer appidI #t0 userid lifeTime authCode #t1 VCdata credential
   Verifier appidV payload ShowReq VP #t2 #t5 #tx #tz #t6 #t7 #t8.
  (LIssurerAuthCodeRequest( Issuer, appidI ) @ #t0) ∧
  (LAuthCodeGenerate( userid, lifeTime, authCode ) @ #t1) ∧
  (LMFGetAuthCode( Issuer, appidI, authCode ) @ #t2) ∧
  (LCredentialIssurance( Issuer, appidI, VCdata ) @ #tx) ∧
  (JSAPIgenerate( VCdata ) @ #tz) ∧
  (LSuperAppStoreVC( userid, VCdata, credential ) @ #t5) ∧
  (LVerifierShowPreReq( Verifier, appidV, ShowReq ) @ #t6) ∧
  (LHolderPresentVP( userid, appidV, VP ) @ #t7) ∧
  (LPresentationVerify( Verifier, appidV, payload, VP ) @ #t8)
 ∧
  (∀ #x. (AdversaryActivity( ) @ #x) ⇒ ⊥) ∧ (payload ⊏ credential)"
*/
by sorry

restriction uniqueClientToServer:
  "∀ msg #i #j.
    ((TLSClientToServer( msg ) @ #i) ∧
     (TLSClientToServer( msg ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction uniqueJSAPI:
  "∀ msg #i #j.
    ((JSAPIgenerate( msg ) @ #i) ∧ (JSAPIgenerate( msg ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction uniqueServerToClient:
  "∀ msg #i #j.
    ((TLSServerToClient( msg ) @ #i) ∧
     (TLSServerToClient( msg ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

lemma CodeSecrecy [reuse]:
  all-traces
  "∀ issuer code #t1 #t2.
    ((UseCode( issuer, code ) @ #t1) ∧ (!KU( code ) @ #t2)) ⇒
    (∃ #x. CompromisedDomain( issuer ) @ #x)"
/*
guarded formula characterizing all counter-examples:
"∃ issuer code #t1 #t2.
  (UseCode( issuer, code ) @ #t1) ∧ (!KU( code ) @ #t2)
 ∧
  ∀ #x. (CompromisedDomain( issuer ) @ #x) ⇒ ⊥"
*/
by sorry

lemma secrecyOfCredential [heuristic={secrecyOfCredential}]:
  all-traces
  "∀ credential VC userid #i.
    (LSuperAppStoreVC( userid, VC, credential ) @ #i) ⇒
    (((((¬(∃ #j. K( credential ) @ #j)) ∨
        (∃ r #x. CompromisedDomain( r ) @ #x)) ∨
       (∃ #i.1 #j #k #m appid data.
         (((MaliciousProgram( 'importVC', appid ) @ #i.1) ∧
           (Issuer( appid ) @ #m)) ∧
          (CompromiseTEE( userid ) @ #j)) ∧
         (LeakData( userid, data ) @ #k))) ∨
      (∃ #i.1 #j #k #m appid ltk data.
        (((MaliciousProgram( 'PresentVP', appid ) @ #i.1) ∧
          (Verifier( appid ) @ #m)) ∧
         (Reaveal( appid, ltk ) @ #j)) ∧
        (LeakData( userid, data ) @ #k))) ∨
     (∃ #i.1 #j #k appid ltk data.
       ((Issuer( appid ) @ #i.1) ∧ (Reaveal( appid, ltk ) @ #j)) ∧
       (LeakData( userid, data ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ credential VC userid #i.
  (LSuperAppStoreVC( userid, VC, credential ) @ #i)
 ∧
  (∃ #j. (K( credential ) @ #j)) ∧
  (∀ r #x. (CompromisedDomain( r ) @ #x) ⇒ ⊥) ∧
  (∀ #i.1 #j #k #m appid data.
    (MaliciousProgram( 'importVC', appid ) @ #i.1) ∧
    (Issuer( appid ) @ #m) ∧
    (CompromiseTEE( userid ) @ #j) ∧
    (LeakData( userid, data ) @ #k)
   ⇒
    ⊥) ∧
  (∀ #i.1 #j #k #m appid ltk data.
    (MaliciousProgram( 'PresentVP', appid ) @ #i.1) ∧
    (Verifier( appid ) @ #m) ∧
    (Reaveal( appid, ltk ) @ #j) ∧
    (LeakData( userid, data ) @ #k)
   ⇒
    ⊥) ∧
  (∀ #i.1 #j #k appid ltk data.
    (Issuer( appid ) @ #i.1) ∧
    (Reaveal( appid, ltk ) @ #j) ∧
    (LeakData( userid, data ) @ #k)
   ⇒
    ⊥)"
*/
simplify
solve( !SuperApp( $UserName, $Number, userid ) ▶₁ #i )
  case InstallSuperAppClient
  solve( !MPK( $Issuer, appid, pk(x) ) ▶₂ #i )
    case MiniprogramRegister
    solve( !TEELTK( $Holder, ~userid, skH ) ▶₃ #i )
      case SuperAppSetUp
      solve( !DB( ~userid, disclosure, sensitiveData ) ▶₄ #i )
        case InstallSuperAppClient
        solve( JSAPI_In( 'importVC', ~appid,
                         <
                          senc(<(hash(~disclosure)++hash(~sensitiveData)), 
                                sign((hash(~disclosure)++hash(~sensitiveData)), ~k)>,
                               envelope_key), 
                          aenc(envelope_key, pk(~k.1))>
               ) ▶₀ #i )
          case JSAPIIn
          solve( !JSAPI( 'importVC', ~appid,
                         <
                          senc(<(hash(~disclosure)++hash(~sensitiveData)), 
                                sign((hash(~disclosure)++hash(~sensitiveData)), ~k)>,
                               envelope_key), 
                          aenc(envelope_key, pk(~k.1))>
                 ) ▶₀ #vr.4 )
            case JSAPIOut_case_01
            solve( !KU( sign((hash(~disclosure)++hash(~sensitiveData)), ~k)
                   ) @ #vk.5 )
              case Z_JSAPICompromised_case_1
              solve( !KU( ~envelope_key ) @ #vk.12 )
                case Z_JSAPICompromised
                solve( TLSServer_In( 'GET', ~sess.1, $Issuer,
                                     <'accessInfoReq', ~appid, ~token.1>
                       ) ▶₀ #vr.16 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sess.1, $Issuer,
                                       <'token_req', ~appid, ~authCode.1>
                         ) ▶₀ #vr.19 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'GET', ~sess.1, $Issuer,
                                         <'userInfo', ~appid, 'req'>
                           ) ▶₀ #vr.21 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~k.1 ) @ #vk.11 )
                        case RevealSuperAppKey
                        solve( !KU( ~sensitiveData ) @ #vk.10 )
                          case LeakSenstiveData
                          by contradiction /* from formulas */
                        next
                          case TLSServerToAdversaryClient
                          solve( TLSServer_In( 'GET', ~adversarySess, $Domain,
                                               <'accessInfoReq', appid.1, ~token.1>
                                 ) ▶₀ #vr.41 )
                            case TLSClientToServer_case_1
                            solve( !KU( ~adversarySess ) @ #vk.12 )
                              case TLSClientToAdversaryServer
                              by contradiction /* from formulas */
                            qed
                          next
                            case TLSClientToServer_case_2
                            solve( TLSServer_In( 'POST', ~sess.2, $Domain,
                                                 <'token_req', appid.1, ~authCode.1>
                                   ) ▶₀ #vr.46 )
                              case TLSClientToServer
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case Z_JSAPICompromised
                          solve( !JSAPI( 'RequestVP', ~appid.1, request_VP ) ▶₀ #vr.46 )
                            case JSAPIOut
                            solve( !JSAPI( 'importVC', ~appid.2,
                                           <
                                            senc(<(hash(~disclosure)++hash(~sensitiveData)), 
                                                  sign((hash(~disclosure)++hash(~sensitiveData)),
                                                       ~k.3)
                                                 >,
                                                 envelope_key.2), 
                                            aenc(envelope_key.2, pk(~k.1))>
                                   ) ▶₀ #vr.49 )
                              case JSAPIOut
                              solve( !KU( ~envelope_key.1 ) @ #vk.12 )
                                case Z_JSAPICompromised
                                solve( !KU( ~k.3 ) @ #vk.13 )
                                  case RevealMiniProgramPrivKey
                                  solve( !KU( ~disclosure ) @ #vk.12 )
                                    case LeakSenstiveData
                                    by contradiction /* from formulas */
                                  next
                                    case TLSServerToAdversaryClient
                                    solve( TLSServer_In( 'GET', ~adversarySess, $Domain,
                                                         <'accessInfoReq', appid.2, ~token.1>
                                           ) ▶₀ #vr.55 )
                                      case TLSClientToServer_case_1
                                      solve( !KU( ~adversarySess ) @ #vk.14 )
                                        case TLSClientToAdversaryServer
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case TLSClientToServer_case_2
                                      solve( TLSServer_In( 'POST', ~sess.3, $Domain,
                                                           <'token_req', appid.1, ~authCode.1>
                                             ) ▶₀ #vr.60 )
                                        case TLSClientToServer
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  next
                                    case Z_JSAPICompromised
                                    by solve( !JSAPI( 'RequestVP', ~appid.2, request_VP
                                              ) ▶₀ #vr.60 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sess.2, $Issuer,
                                       <'token_req', ~appid, ~authCode.1>
                         ) ▶₀ #vr.19 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sess.3, $Issuer,
                                         <'token_req', ~appid, ~authCode.1>
                           ) ▶₀ #vr.21 )
                      case TLSClientToServer_case_1
                      solve( TLSServer_In( 'GET', ~sess.2, $Issuer,
                                           <'userInfo', ~appid, 'req'>
                             ) ▶₀ #vr.21 )
                        case TLSClientToServer_case_1
                        solve( !KU( ~k.1 ) @ #vk.11 )
                          case RevealSuperAppKey
                          solve( !KU( ~sess.1 ) @ #vk.13 )
                            case LeakSenstiveData_case_1
                            by contradiction /* from formulas */
                          next
                            case LeakSenstiveData_case_2
                            by contradiction /* from formulas */
                          next
                            case RevealMiniProgramPrivKey
                            solve( !KU( ~sensitiveData ) @ #vk.11 )
                              case LeakSenstiveData
                              by contradiction /* from formulas */
                            next
                              case TLSServerToAdversaryClient
                              solve( TLSServer_In( 'GET', ~adversarySess, $Domain,
                                                   <'accessInfoReq', appid.2, ~token.1>
                                     ) ▶₀ #vr.43 )
                                case TLSClientToServer
                                solve( TLSServer_In( 'POST', ~sess.3, $Domain,
                                                     <'token_req', appid.1, ~authCode.1>
                                       ) ▶₀ #vr.48 )
                                  case TLSClientToServer_case_1
                                  solve( !KU( ~token ) @ #vk.18 )
                                    case TLSClientToAdversaryServer
                                    by contradiction /* from formulas */
                                  next
                                    case TLSServerToAdversaryClient
                                    solve( !KU( ~sessPost ) @ #vk.19 )
                                      case TLSClientToAdversaryServer
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                next
                                  case TLSClientToServer_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case Z_JSAPICompromised
                              solve( !KU( ~token ) @ #vk.18 )
                                case TLSClientToAdversaryServer
                                by contradiction /* from formulas */
                              next
                                case TLSServerToAdversaryClient
                                solve( !KU( ~sessPost ) @ #vk.20 )
                                  case TLSClientToAdversaryServer
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          next
                            case RevealSuperAppKey
                            solve( !KU( ~token ) @ #vk.17 )
                              case TLSClientToAdversaryServer
                              by contradiction /* from formulas */
                            next
                              case TLSServerToAdversaryClient
                              solve( !KU( ~sessPost ) @ #vk.18 )
                                case TLSClientToAdversaryServer
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case TLSClientToAdversaryServer_case_1
                            by contradiction /* from formulas */
                          next
                            case TLSClientToAdversaryServer_case_2
                            by contradiction /* from formulas */
                          next
                            case TLSClientToAdversaryServer_case_3
                            by contradiction /* from formulas */
                          next
                            case TLSClientToAdversaryServer_case_4
                            by contradiction /* from formulas */
                          next
                            case TLSClientToAdversaryServer_case_5
                            by contradiction /* from formulas */
                          next
                            case TLSClientToAdversaryServer_case_6
                            by contradiction /* from formulas */
                          next
                            case TLSClientToAdversaryServer_case_7
                            by contradiction /* from formulas */
                          next
                            case TLSClientToAdversaryServer_case_8
                            by contradiction /* from formulas */
                          next
                            case TLSServerToAdversaryClient_case_1
                            solve( !KU( ~token ) @ #vk.17 )
                              case TLSClientToAdversaryServer
                              by contradiction /* from formulas */
                            next
                              case TLSServerToAdversaryClient
                              solve( !KU( ~sessPost ) @ #vk.20 )
                                case TLSClientToAdversaryServer
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case TLSServerToAdversaryClient_case_2
                            solve( !KU( ~token ) @ #vk.18 )
                              case TLSClientToAdversaryServer
                              by contradiction /* from formulas */
                            next
                              case TLSServerToAdversaryClient
                              solve( !KU( ~sessPost ) @ #vk.21 )
                                case TLSClientToAdversaryServer
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case TLSServerToAdversaryClient_case_3
                            by sorry
                          next
                            case TLSServerToAdversaryClient_case_4
                            by sorry
                          next
                            case TLSServerToAdversaryClient_case_5
                            by sorry
                          next
                            case Z_JSAPICompromised_case_1
                            by contradiction /* cyclic */
                          next
                            case Z_JSAPICompromised_case_2
                            by sorry
                          next
                            case Z_JSAPICompromised_case_3
                            by sorry
                          next
                            case Z_JSAPICompromised_case_4
                            by sorry
                          next
                            case Z_JSAPICompromised_case_5
                            by sorry
                          next
                            case fresh
                            by sorry
                          qed
                        qed
                      next
                        case TLSClientToServer_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case Z_JSAPICompromised_case_2
              by sorry
            next
              case Z_JSAPICompromised_case_3
              by sorry
            next
              case c_sign
              by sorry
            qed
          next
            case JSAPIOut_case_02
            by contradiction /* from formulas */
          next
            case JSAPIOut_case_03
            by contradiction /* from formulas */
          next
            case JSAPIOut_case_04
            by contradiction /* from formulas */
          next
            case JSAPIOut_case_05
            by contradiction /* from formulas */
          next
            case JSAPIOut_case_06
            by contradiction /* from formulas */
          next
            case JSAPIOut_case_07
            by contradiction /* from formulas */
          next
            case JSAPIOut_case_08
            by contradiction /* from formulas */
          next
            case JSAPIOut_case_09
            by contradiction /* from formulas */
          next
            case JSAPIOut_case_10
            by contradiction /* from formulas */
          next
            case JSAPIOut_case_11
            by contradiction /* from formulas */
          next
            case JSAPIOut_case_12
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma NonInjectAuthVCIssurance [heuristic={exec}]:
  all-traces
  "∀ #i userid data credential.
    (SuperAppVC( userid, data, credential ) @ #i) ⇒
    ((∃ #j Issuer appid data.1.
       (LCredentialIssurance( Issuer, appid, data.1 ) @ #j) ∧ (#j < #i)) ∨
     (∃ appid ltk #i.1. Reaveal( appid, ltk ) @ #i.1))"
/*
guarded formula characterizing all counter-examples:
"∃ #i userid data credential.
  (SuperAppVC( userid, data, credential ) @ #i)
 ∧
  (∀ #j Issuer appid data.1.
    (LCredentialIssurance( Issuer, appid, data.1 ) @ #j)
   ⇒
    ¬(#j < #i)) ∧
  (∀ appid ltk #i.1. (Reaveal( appid, ltk ) @ #i.1) ⇒ ⊥)"
*/
by sorry

lemma integrityOfVC:
  all-traces
  "∀ #i userid data credential.
    (SuperAppVC( userid, data, credential ) @ #i) ⇒
    (∃ #j appid. (IssueVC( appid, credential ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ #i userid data credential.
  (SuperAppVC( userid, data, credential ) @ #i)
 ∧
  ∀ #j appid. (IssueVC( appid, credential ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma authenticationVP:
  all-traces
  "∀ V appidV payload VP #i.
    (LPresentationVerify( V, appidV, payload, VP ) @ #i) ⇒
    (∃ userid #j.
      (LHolderPresentVP( userid, appidV, VP ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ V appidV payload VP #i.
  (LPresentationVerify( V, appidV, payload, VP ) @ #i)
 ∧
  ∀ userid #j.
   (LHolderPresentVP( userid, appidV, VP ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry



























/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.8.0
Maude version 2.7.1
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2023-08-30 13:15:41.590881948 UTC
*/

end